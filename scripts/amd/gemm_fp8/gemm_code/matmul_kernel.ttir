module {
  tt.func public @matmul_kernel_0d1d2d3d4c5d6c7d8c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c36_i32 = arith.constant 36 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<32x128xf32>
    %cst_0 = arith.constant dense<4608> : tensor<1x128xi32>
    %cst_1 = arith.constant dense<320> : tensor<64x1xi32>
    %cst_2 = arith.constant dense<320> : tensor<1x64xi32>
    %cst_3 = arith.constant dense<1> : tensor<32x1xi32>
    %c64_i32 = arith.constant 64 : i32
    %c128_i32 = arith.constant 128 : i32
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.divsi %0, %c36_i32 : i32
    %3 = arith.remsi %0, %c36_i32 : i32
    %4 = arith.muli %2, %c32_i32 : i32
    %5 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %6 = tt.splat %4 : (i32) -> tensor<32xi32>
    %7 = arith.addi %6, %5 : tensor<32xi32>
    %8 = arith.muli %3, %c128_i32 : i32
    %9 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %10 = tt.splat %8 : (i32) -> tensor<128xi32>
    %11 = arith.addi %10, %9 : tensor<128xi32>
    %12 = arith.muli %1, %c64_i32 : i32
    %13 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %14 = tt.splat %12 : (i32) -> tensor<64xi32>
    %15 = arith.addi %14, %13 : tensor<64xi32>
    %16 = tt.expand_dims %7 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %17 = tt.splat %arg3 : (i32) -> tensor<32x1xi32>
    %18 = arith.muli %16, %17 : tensor<32x1xi32>
    %19 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>>
    %20 = tt.addptr %19, %18 : tensor<32x1x!tt.ptr<f16>>, tensor<32x1xi32>
    %21 = tt.expand_dims %15 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %22 = tt.broadcast %20 : (tensor<32x1x!tt.ptr<f16>>) -> tensor<32x64x!tt.ptr<f16>>
    %23 = tt.broadcast %21 : (tensor<1x64xi32>) -> tensor<32x64xi32>
    %24 = tt.addptr %22, %23 : tensor<32x64x!tt.ptr<f16>>, tensor<32x64xi32>
    %25 = tt.expand_dims %15 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %26 = tt.splat %arg4 : (i32) -> tensor<64x1xi32>
    %27 = arith.muli %25, %26 : tensor<64x1xi32>
    %28 = tt.splat %arg1 : (!tt.ptr<i8>) -> tensor<64x1x!tt.ptr<i8>>
    %29 = tt.addptr %28, %27 : tensor<64x1x!tt.ptr<i8>>, tensor<64x1xi32>
    %30 = tt.expand_dims %11 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32>
    %31 = tt.broadcast %29 : (tensor<64x1x!tt.ptr<i8>>) -> tensor<64x128x!tt.ptr<i8>>
    %32 = tt.broadcast %30 : (tensor<1x128xi32>) -> tensor<64x128xi32>
    %33 = tt.addptr %31, %32 : tensor<64x128x!tt.ptr<i8>>, tensor<64x128xi32>
    %34 = arith.cmpi slt, %16, %cst_3 : tensor<32x1xi32>
    %35 = arith.cmpi slt, %21, %cst_2 : tensor<1x64xi32>
    %36 = tt.broadcast %34 : (tensor<32x1xi1>) -> tensor<32x64xi1>
    %37 = tt.broadcast %35 : (tensor<1x64xi1>) -> tensor<32x64xi1>
    %38 = arith.andi %36, %37 : tensor<32x64xi1>
    %39 = arith.cmpi slt, %25, %cst_1 : tensor<64x1xi32>
    %40 = arith.cmpi slt, %30, %cst_0 : tensor<1x128xi32>
    %41 = tt.broadcast %39 : (tensor<64x1xi1>) -> tensor<64x128xi1>
    %42 = tt.broadcast %40 : (tensor<1x128xi1>) -> tensor<64x128xi1>
    %43 = arith.andi %41, %42 : tensor<64x128xi1>
    %44 = tt.load %24, %38 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64xf16>
    %45 = tt.load %33, %43 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x128xi8>
    %46 = tt.bitcast %45 : tensor<64x128xi8> -> tensor<64x128xf8E5M2>
    %47 = tt.fp_to_fp %46 : tensor<64x128xf8E5M2> -> tensor<64x128xf32>
    %48 = arith.truncf %47 : tensor<64x128xf32> to tensor<64x128xf16>
    %49 = tt.dot %44, %48, %cst {allowTF32 = true} : tensor<32x64xf16> * tensor<64x128xf16> -> tensor<32x128xf32>
    %50 = tt.splat %arg5 : (i32) -> tensor<32x1xi32>
    %51 = arith.muli %16, %50 : tensor<32x1xi32>
    %52 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %53 = tt.addptr %52, %51 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %54 = tt.broadcast %53 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x128x!tt.ptr<f32>>
    %55 = tt.broadcast %30 : (tensor<1x128xi32>) -> tensor<32x128xi32>
    %56 = tt.addptr %54, %55 : tensor<32x128x!tt.ptr<f32>>, tensor<32x128xi32>
    %57 = tt.broadcast %34 : (tensor<32x1xi1>) -> tensor<32x128xi1>
    %58 = tt.broadcast %40 : (tensor<1x128xi1>) -> tensor<32x128xi1>
    %59 = arith.andi %57, %58 : tensor<32x128xi1>
    %60 = "tt.atomic_rmw"(%56, %49, %59) <{atomic_rmw_op = 5 : i32, sem = 4 : i32}> : (tensor<32x128x!tt.ptr<f32>>, tensor<32x128xf32>, tensor<32x128xi1>) -> tensor<32x128xf32>
    tt.return
  }
}
