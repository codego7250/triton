#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3d4c5d6c7d8c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
    %cst_0 = arith.constant dense<1> : tensor<32x1xi32, #blocked>
    %cst_1 = arith.constant dense<320> : tensor<1x64xi32, #blocked>
    %cst_2 = arith.constant dense<320> : tensor<64x1xi32, #blocked1>
    %cst_3 = arith.constant dense<4608> : tensor<1x128xi32, #blocked1>
    %cst_4 = arith.constant dense<1> : tensor<32x1xi32, #blocked2>
    %cst_5 = arith.constant dense<4608> : tensor<1x128xi32, #blocked2>
    %c36_i32 = arith.constant 36 : i32
    %c64_i32 = arith.constant 64 : i32
    %c128_i32 = arith.constant 128 : i32
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.divsi %0, %c36_i32 : i32
    %3 = arith.remsi %0, %c36_i32 : i32
    %4 = arith.muli %2, %c32_i32 : i32
    %5 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %6 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %7 = tt.splat %4 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %8 = tt.splat %4 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %9 = arith.addi %7, %5 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = arith.addi %8, %6 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %11 = arith.muli %3, %c128_i32 : i32
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %14 = tt.splat %11 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %15 = tt.splat %11 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %16 = arith.addi %14, %12 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %17 = arith.addi %15, %13 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %18 = arith.muli %1, %c64_i32 : i32
    %19 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %20 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %21 = tt.splat %18 : (i32) -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %22 = tt.splat %18 : (i32) -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %23 = arith.addi %21, %19 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %24 = arith.addi %22, %20 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %25 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<32x1xi32, #blocked>
    %26 = tt.expand_dims %10 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<32x1xi32, #blocked2>
    %27 = tt.splat %arg3 : (i32) -> tensor<32x1xi32, #blocked>
    %28 = arith.muli %25, %27 : tensor<32x1xi32, #blocked>
    %29 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>, #blocked>
    %30 = tt.addptr %29, %28 : tensor<32x1x!tt.ptr<f16>, #blocked>, tensor<32x1xi32, #blocked>
    %31 = tt.expand_dims %23 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked>
    %32 = tt.broadcast %30 : (tensor<32x1x!tt.ptr<f16>, #blocked>) -> tensor<32x64x!tt.ptr<f16>, #blocked>
    %33 = tt.broadcast %31 : (tensor<1x64xi32, #blocked>) -> tensor<32x64xi32, #blocked>
    %34 = tt.addptr %32, %33 : tensor<32x64x!tt.ptr<f16>, #blocked>, tensor<32x64xi32, #blocked>
    %35 = tt.expand_dims %24 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1>
    %36 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1>
    %37 = arith.muli %35, %36 : tensor<64x1xi32, #blocked1>
    %38 = tt.splat %arg1 : (!tt.ptr<i8>) -> tensor<64x1x!tt.ptr<i8>, #blocked1>
    %39 = tt.addptr %38, %37 : tensor<64x1x!tt.ptr<i8>, #blocked1>, tensor<64x1xi32, #blocked1>
    %40 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi32, #blocked1>
    %41 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x128xi32, #blocked2>
    %42 = tt.broadcast %39 : (tensor<64x1x!tt.ptr<i8>, #blocked1>) -> tensor<64x128x!tt.ptr<i8>, #blocked1>
    %43 = tt.broadcast %40 : (tensor<1x128xi32, #blocked1>) -> tensor<64x128xi32, #blocked1>
    %44 = tt.addptr %42, %43 : tensor<64x128x!tt.ptr<i8>, #blocked1>, tensor<64x128xi32, #blocked1>
    %45 = "triton_gpu.cmpi"(%25, %cst_0) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked>, tensor<32x1xi32, #blocked>) -> tensor<32x1xi1, #blocked>
    %46 = "triton_gpu.cmpi"(%26, %cst_4) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked2>, tensor<32x1xi32, #blocked2>) -> tensor<32x1xi1, #blocked2>
    %47 = "triton_gpu.cmpi"(%31, %cst_1) <{predicate = 2 : i64}> : (tensor<1x64xi32, #blocked>, tensor<1x64xi32, #blocked>) -> tensor<1x64xi1, #blocked>
    %48 = tt.broadcast %45 : (tensor<32x1xi1, #blocked>) -> tensor<32x64xi1, #blocked>
    %49 = tt.broadcast %47 : (tensor<1x64xi1, #blocked>) -> tensor<32x64xi1, #blocked>
    %50 = arith.andi %48, %49 : tensor<32x64xi1, #blocked>
    %51 = "triton_gpu.cmpi"(%35, %cst_2) <{predicate = 2 : i64}> : (tensor<64x1xi32, #blocked1>, tensor<64x1xi32, #blocked1>) -> tensor<64x1xi1, #blocked1>
    %52 = "triton_gpu.cmpi"(%40, %cst_3) <{predicate = 2 : i64}> : (tensor<1x128xi32, #blocked1>, tensor<1x128xi32, #blocked1>) -> tensor<1x128xi1, #blocked1>
    %53 = "triton_gpu.cmpi"(%41, %cst_5) <{predicate = 2 : i64}> : (tensor<1x128xi32, #blocked2>, tensor<1x128xi32, #blocked2>) -> tensor<1x128xi1, #blocked2>
    %54 = tt.broadcast %51 : (tensor<64x1xi1, #blocked1>) -> tensor<64x128xi1, #blocked1>
    %55 = tt.broadcast %52 : (tensor<1x128xi1, #blocked1>) -> tensor<64x128xi1, #blocked1>
    %56 = arith.andi %54, %55 : tensor<64x128xi1, #blocked1>
    %57 = tt.load %34, %50 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x64xf16, #blocked>
    %58 = triton_gpu.convert_layout %57 : (tensor<32x64xf16, #blocked>) -> tensor<32x64xf16, #shared>
    %59 = triton_gpu.convert_layout %58 : (tensor<32x64xf16, #shared>) -> tensor<32x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
    %60 = tt.load %44, %56 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x128xi8, #blocked1>
    %61 = tt.bitcast %60 : tensor<64x128xi8, #blocked1> -> tensor<64x128xf8E5M2, #blocked1>
    %62 = tt.fp_to_fp %61 : tensor<64x128xf8E5M2, #blocked1> -> tensor<64x128xf32, #blocked1>
    %63 = arith.truncf %62 : tensor<64x128xf32, #blocked1> to tensor<64x128xf16, #blocked1>
    %64 = triton_gpu.convert_layout %63 : (tensor<64x128xf16, #blocked1>) -> tensor<64x128xf16, #shared>
    %65 = triton_gpu.convert_layout %64 : (tensor<64x128xf16, #shared>) -> tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
    %66 = tt.dot %59, %65, %cst {allowTF32 = true} : tensor<32x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> * tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> -> tensor<32x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
    %67 = tt.splat %arg5 : (i32) -> tensor<32x1xi32, #blocked2>
    %68 = arith.muli %26, %67 : tensor<32x1xi32, #blocked2>
    %69 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>, #blocked2>
    %70 = tt.addptr %69, %68 : tensor<32x1x!tt.ptr<f32>, #blocked2>, tensor<32x1xi32, #blocked2>
    %71 = tt.broadcast %70 : (tensor<32x1x!tt.ptr<f32>, #blocked2>) -> tensor<32x128x!tt.ptr<f32>, #blocked2>
    %72 = tt.broadcast %41 : (tensor<1x128xi32, #blocked2>) -> tensor<32x128xi32, #blocked2>
    %73 = tt.addptr %71, %72 : tensor<32x128x!tt.ptr<f32>, #blocked2>, tensor<32x128xi32, #blocked2>
    %74 = tt.broadcast %46 : (tensor<32x1xi1, #blocked2>) -> tensor<32x128xi1, #blocked2>
    %75 = tt.broadcast %53 : (tensor<1x128xi1, #blocked2>) -> tensor<32x128xi1, #blocked2>
    %76 = arith.andi %74, %75 : tensor<32x128xi1, #blocked2>
    %77 = triton_gpu.convert_layout %66 : (tensor<32x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>) -> tensor<32x128xf32, #blocked2>
    %78 = "tt.atomic_rmw"(%73, %77, %76) <{atomic_rmw_op = 5 : i32, sem = 4 : i32}> : (tensor<32x128x!tt.ptr<f32>, #blocked2>, tensor<32x128xf32, #blocked2>, tensor<32x128xi1, #blocked2>) -> tensor<32x128xf32, #blocked2>
    tt.return
  }
}
