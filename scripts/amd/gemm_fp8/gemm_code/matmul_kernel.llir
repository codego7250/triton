; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8]

; Function Attrs: mustprogress nofree nounwind willreturn
define amdgpu_kernel void @matmul_kernel_0d1d2d3d4c5d6c7d8c(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %8 = and i32 %7, 63
  %9 = lshr i32 %7, 6
  %10 = lshr i32 %8, 3
  %11 = and i32 %9, 3
  %12 = shl nuw nsw i32 %11, 3
  %13 = or i32 %12, %10
  %14 = lshr i32 %8, 5
  %15 = shl nuw nsw i32 %9, 1
  %16 = and i32 %15, 30
  %17 = or i32 %16, %14
  %18 = add nuw nsw i32 %17, 8
  %19 = add nuw nsw i32 %17, 16
  %20 = add nuw nsw i32 %17, 24
  %21 = and i32 %7, 7
  %22 = shl nuw nsw i32 %21, 4
  %23 = and i32 %7, 31
  %24 = shl nuw nsw i32 %23, 2
  %25 = shl nuw nsw i32 %21, 3
  %26 = shl nuw nsw i32 %9, 3
  %27 = and i32 %26, 56
  %28 = or i32 %27, %10
  %29 = shl nuw nsw i32 %11, 5
  %30 = or i32 %29, %23
  %31 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %32 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %.frozen = freeze i32 %31
  %33 = sdiv i32 %.frozen, 36
  %34 = mul i32 %33, 36
  %.decomposed = sub i32 %.frozen, %34
  %35 = shl nsw i32 %33, 5
  %36 = or i32 %13, %35
  %37 = or i32 %17, %35
  %38 = add nsw i32 %18, %35
  %39 = add nsw i32 %19, %35
  %40 = add nsw i32 %20, %35
  %41 = shl nsw i32 %.decomposed, 7
  %42 = or i32 %41, %22
  %43 = or i32 %42, 4
  %44 = or i32 %42, 8
  %45 = or i32 %42, 12
  %46 = or i32 %41, %24
  %47 = or i32 %46, 1
  %48 = or i32 %46, 2
  %49 = or i32 %46, 3
  %50 = shl i32 %32, 6
  %51 = or i32 %25, %50
  %52 = or i32 %28, %50
  %53 = or i32 %50, 32
  %54 = add i32 %53, %28
  %55 = mul i32 %52, %4
  %56 = mul i32 %54, %4
  %57 = sext i32 %55 to i64
  %58 = getelementptr i8, ptr addrspace(1) %1, i64 %57
  %59 = sext i32 %56 to i64
  %60 = getelementptr i8, ptr addrspace(1) %1, i64 %59
  %61 = sext i32 %42 to i64
  %62 = getelementptr i8, ptr addrspace(1) %58, i64 %61
  %63 = sext i32 %43 to i64
  %64 = getelementptr i8, ptr addrspace(1) %58, i64 %63
  %65 = sext i32 %44 to i64
  %66 = getelementptr i8, ptr addrspace(1) %58, i64 %65
  %67 = sext i32 %45 to i64
  %68 = getelementptr i8, ptr addrspace(1) %58, i64 %67
  %69 = getelementptr i8, ptr addrspace(1) %60, i64 %61
  %70 = getelementptr i8, ptr addrspace(1) %60, i64 %63
  %71 = getelementptr i8, ptr addrspace(1) %60, i64 %65
  %72 = getelementptr i8, ptr addrspace(1) %60, i64 %67
  %73 = icmp slt i32 %36, 1
  %74 = icmp slt i32 %37, 1
  %75 = icmp slt i32 %38, 1
  %76 = icmp slt i32 %39, 1
  %77 = icmp slt i32 %40, 1
  %78 = icmp slt i32 %51, 320
  %79 = and i1 %78, %73
  %80 = icmp slt i32 %52, 320
  %81 = icmp slt i32 %54, 320
  br i1 %79, label %82, label %105

82:                                               ; preds = %6
  %83 = mul i32 %36, %3
  %84 = sext i32 %83 to i64
  %85 = getelementptr half, ptr addrspace(1) %0, i64 %84
  %86 = or i32 %51, 6
  %87 = sext i32 %86 to i64
  %88 = getelementptr half, ptr addrspace(1) %85, i64 %87
  %89 = or i32 %51, 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr half, ptr addrspace(1) %85, i64 %90
  %92 = or i32 %51, 2
  %93 = sext i32 %92 to i64
  %94 = getelementptr half, ptr addrspace(1) %85, i64 %93
  %95 = sext i32 %51 to i64
  %96 = getelementptr half, ptr addrspace(1) %85, i64 %95
  %97 = addrspacecast ptr addrspace(1) %96 to ptr
  %98 = load <2 x half>, ptr %97, align 4
  %99 = addrspacecast ptr addrspace(1) %94 to ptr
  %100 = load <2 x half>, ptr %99, align 4
  %101 = addrspacecast ptr addrspace(1) %91 to ptr
  %102 = load <2 x half>, ptr %101, align 4
  %103 = addrspacecast ptr addrspace(1) %88 to ptr
  %104 = load <2 x half>, ptr %103, align 4
  br label %105

105:                                              ; preds = %6, %82
  %106 = phi <2 x half> [ %102, %82 ], [ zeroinitializer, %6 ]
  %107 = phi <2 x half> [ %98, %82 ], [ zeroinitializer, %6 ]
  %108 = phi <2 x half> [ %100, %82 ], [ zeroinitializer, %6 ]
  %109 = phi <2 x half> [ %104, %82 ], [ zeroinitializer, %6 ]
  %110 = shl nuw nsw i32 %13, 6
  %111 = or i32 %110, %25
  %112 = zext i32 %111 to i64
  %113 = getelementptr half, ptr addrspace(3) @global_smem, i64 %112
  %114 = getelementptr half, ptr addrspace(3) %113, i64 1
  %115 = getelementptr half, ptr addrspace(3) %113, i64 2
  %116 = getelementptr half, ptr addrspace(3) %113, i64 3
  %117 = getelementptr half, ptr addrspace(3) %113, i64 4
  %118 = getelementptr half, ptr addrspace(3) %113, i64 5
  %119 = getelementptr half, ptr addrspace(3) %113, i64 6
  %120 = getelementptr half, ptr addrspace(3) %113, i64 7
  %121 = shufflevector <2 x half> %107, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %121, ptr addrspace(3) %113, align 2
  %122 = shufflevector <2 x half> %107, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %122, ptr addrspace(3) %114, align 2
  %123 = shufflevector <2 x half> %108, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %123, ptr addrspace(3) %115, align 2
  %124 = shufflevector <2 x half> %108, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %124, ptr addrspace(3) %116, align 2
  %125 = shufflevector <2 x half> %106, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %125, ptr addrspace(3) %117, align 2
  %126 = shufflevector <2 x half> %106, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %126, ptr addrspace(3) %118, align 2
  %127 = shufflevector <2 x half> %109, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %127, ptr addrspace(3) %119, align 2
  %128 = shufflevector <2 x half> %109, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %128, ptr addrspace(3) %120, align 2
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %129 = icmp ugt i32 %8, 31
  %130 = select i1 %129, i32 4, i32 0
  %131 = shl nuw nsw i32 %23, 6
  %132 = or i32 %130, %131
  %133 = or i32 %132, 8
  %134 = or i32 %132, 16
  %135 = or i32 %132, 24
  %136 = or i32 %132, 32
  %137 = or i32 %132, 40
  %138 = or i32 %132, 48
  %139 = or i32 %132, 56
  %140 = zext i32 %132 to i64
  %141 = getelementptr half, ptr addrspace(3) @global_smem, i64 %140
  %142 = load <4 x half>, ptr addrspace(3) %141, align 2
  %143 = zext i32 %133 to i64
  %144 = getelementptr half, ptr addrspace(3) @global_smem, i64 %143
  %145 = load <4 x half>, ptr addrspace(3) %144, align 2
  %146 = zext i32 %134 to i64
  %147 = getelementptr half, ptr addrspace(3) @global_smem, i64 %146
  %148 = load <4 x half>, ptr addrspace(3) %147, align 2
  %149 = zext i32 %135 to i64
  %150 = getelementptr half, ptr addrspace(3) @global_smem, i64 %149
  %151 = load <4 x half>, ptr addrspace(3) %150, align 2
  %152 = zext i32 %136 to i64
  %153 = getelementptr half, ptr addrspace(3) @global_smem, i64 %152
  %154 = load <4 x half>, ptr addrspace(3) %153, align 2
  %155 = zext i32 %137 to i64
  %156 = getelementptr half, ptr addrspace(3) @global_smem, i64 %155
  %157 = load <4 x half>, ptr addrspace(3) %156, align 2
  %158 = zext i32 %138 to i64
  %159 = getelementptr half, ptr addrspace(3) @global_smem, i64 %158
  %160 = load <4 x half>, ptr addrspace(3) %159, align 2
  %161 = zext i32 %139 to i64
  %162 = getelementptr half, ptr addrspace(3) @global_smem, i64 %161
  %163 = load <4 x half>, ptr addrspace(3) %162, align 2
  br i1 %80, label %164, label %173

164:                                              ; preds = %105
  %165 = addrspacecast ptr addrspace(1) %62 to ptr
  %166 = load <4 x i8>, ptr %165, align 4
  %167 = addrspacecast ptr addrspace(1) %64 to ptr
  %168 = load <4 x i8>, ptr %167, align 4
  %169 = addrspacecast ptr addrspace(1) %66 to ptr
  %170 = load <4 x i8>, ptr %169, align 4
  %171 = addrspacecast ptr addrspace(1) %68 to ptr
  %172 = load <4 x i8>, ptr %171, align 4
  br label %173

173:                                              ; preds = %105, %164
  %174 = phi <4 x i8> [ %170, %164 ], [ zeroinitializer, %105 ]
  %175 = phi <4 x i8> [ %166, %164 ], [ zeroinitializer, %105 ]
  %176 = phi <4 x i8> [ %168, %164 ], [ zeroinitializer, %105 ]
  %177 = phi <4 x i8> [ %172, %164 ], [ zeroinitializer, %105 ]
  br i1 %81, label %178, label %187

178:                                              ; preds = %173
  %179 = addrspacecast ptr addrspace(1) %69 to ptr
  %180 = load <4 x i8>, ptr %179, align 4
  %181 = addrspacecast ptr addrspace(1) %70 to ptr
  %182 = load <4 x i8>, ptr %181, align 4
  %183 = addrspacecast ptr addrspace(1) %71 to ptr
  %184 = load <4 x i8>, ptr %183, align 4
  %185 = addrspacecast ptr addrspace(1) %72 to ptr
  %186 = load <4 x i8>, ptr %185, align 4
  br label %187

187:                                              ; preds = %173, %178
  %188 = phi <4 x i8> [ %184, %178 ], [ zeroinitializer, %173 ]
  %189 = phi <4 x i8> [ %180, %178 ], [ zeroinitializer, %173 ]
  %190 = phi <4 x i8> [ %182, %178 ], [ zeroinitializer, %173 ]
  %191 = phi <4 x i8> [ %186, %178 ], [ zeroinitializer, %173 ]
  %192 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %175, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %193 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %175, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %194 = bitcast <4 x i8> %192 to <2 x half>
  %195 = bitcast <4 x i8> %193 to <2 x half>
  %196 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %176, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %197 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %176, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %198 = bitcast <4 x i8> %196 to <2 x half>
  %199 = bitcast <4 x i8> %197 to <2 x half>
  %200 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %174, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %201 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %174, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %202 = bitcast <4 x i8> %200 to <2 x half>
  %203 = bitcast <4 x i8> %201 to <2 x half>
  %204 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %177, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %205 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %177, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %206 = bitcast <4 x i8> %204 to <2 x half>
  %207 = bitcast <4 x i8> %205 to <2 x half>
  %208 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %189, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %209 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %189, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %210 = bitcast <4 x i8> %208 to <2 x half>
  %211 = bitcast <4 x i8> %209 to <2 x half>
  %212 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %190, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %213 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %190, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %214 = bitcast <4 x i8> %212 to <2 x half>
  %215 = bitcast <4 x i8> %213 to <2 x half>
  %216 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %188, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %217 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %188, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %218 = bitcast <4 x i8> %216 to <2 x half>
  %219 = bitcast <4 x i8> %217 to <2 x half>
  %220 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %191, <4 x i32> <i32 0, i32 4, i32 2, i32 5>
  %221 = shufflevector <4 x i8> <i8 0, i8 poison, i8 0, i8 poison>, <4 x i8> %191, <4 x i32> <i32 0, i32 6, i32 2, i32 7>
  %222 = bitcast <4 x i8> %220 to <2 x half>
  %223 = bitcast <4 x i8> %221 to <2 x half>
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %224 = shl nuw nsw i32 %28, 7
  %225 = or i32 %224, %22
  %226 = zext i32 %225 to i64
  %227 = getelementptr half, ptr addrspace(3) @global_smem, i64 %226
  %228 = getelementptr half, ptr addrspace(3) %227, i64 1
  %229 = getelementptr half, ptr addrspace(3) %227, i64 2
  %230 = getelementptr half, ptr addrspace(3) %227, i64 3
  %231 = getelementptr half, ptr addrspace(3) %227, i64 4
  %232 = getelementptr half, ptr addrspace(3) %227, i64 5
  %233 = getelementptr half, ptr addrspace(3) %227, i64 6
  %234 = getelementptr half, ptr addrspace(3) %227, i64 7
  %235 = getelementptr half, ptr addrspace(3) %227, i64 8
  %236 = getelementptr half, ptr addrspace(3) %227, i64 9
  %237 = getelementptr half, ptr addrspace(3) %227, i64 10
  %238 = getelementptr half, ptr addrspace(3) %227, i64 11
  %239 = getelementptr half, ptr addrspace(3) %227, i64 12
  %240 = getelementptr half, ptr addrspace(3) %227, i64 13
  %241 = getelementptr half, ptr addrspace(3) %227, i64 14
  %242 = getelementptr half, ptr addrspace(3) %227, i64 15
  %243 = getelementptr half, ptr addrspace(3) %227, i64 4096
  %244 = getelementptr half, ptr addrspace(3) %227, i64 4097
  %245 = getelementptr half, ptr addrspace(3) %227, i64 4098
  %246 = getelementptr half, ptr addrspace(3) %227, i64 4099
  %247 = getelementptr half, ptr addrspace(3) %227, i64 4100
  %248 = getelementptr half, ptr addrspace(3) %227, i64 4101
  %249 = getelementptr half, ptr addrspace(3) %227, i64 4102
  %250 = getelementptr half, ptr addrspace(3) %227, i64 4103
  %251 = getelementptr half, ptr addrspace(3) %227, i64 4104
  %252 = getelementptr half, ptr addrspace(3) %227, i64 4105
  %253 = getelementptr half, ptr addrspace(3) %227, i64 4106
  %254 = getelementptr half, ptr addrspace(3) %227, i64 4107
  %255 = getelementptr half, ptr addrspace(3) %227, i64 4108
  %256 = getelementptr half, ptr addrspace(3) %227, i64 4109
  %257 = getelementptr half, ptr addrspace(3) %227, i64 4110
  %258 = getelementptr half, ptr addrspace(3) %227, i64 4111
  %259 = shufflevector <2 x half> %194, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %259, ptr addrspace(3) %227, align 2
  %260 = shufflevector <2 x half> %194, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %260, ptr addrspace(3) %228, align 2
  %261 = shufflevector <2 x half> %195, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %261, ptr addrspace(3) %229, align 2
  %262 = shufflevector <2 x half> %195, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %262, ptr addrspace(3) %230, align 2
  %263 = shufflevector <2 x half> %198, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %263, ptr addrspace(3) %231, align 2
  %264 = shufflevector <2 x half> %198, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %264, ptr addrspace(3) %232, align 2
  %265 = shufflevector <2 x half> %199, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %265, ptr addrspace(3) %233, align 2
  %266 = shufflevector <2 x half> %199, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %266, ptr addrspace(3) %234, align 2
  %267 = shufflevector <2 x half> %202, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %267, ptr addrspace(3) %235, align 2
  %268 = shufflevector <2 x half> %202, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %268, ptr addrspace(3) %236, align 2
  %269 = shufflevector <2 x half> %203, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %269, ptr addrspace(3) %237, align 2
  %270 = shufflevector <2 x half> %203, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %270, ptr addrspace(3) %238, align 2
  %271 = shufflevector <2 x half> %206, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %271, ptr addrspace(3) %239, align 2
  %272 = shufflevector <2 x half> %206, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %272, ptr addrspace(3) %240, align 2
  %273 = shufflevector <2 x half> %207, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %273, ptr addrspace(3) %241, align 2
  %274 = shufflevector <2 x half> %207, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %274, ptr addrspace(3) %242, align 2
  %275 = shufflevector <2 x half> %210, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %275, ptr addrspace(3) %243, align 2
  %276 = shufflevector <2 x half> %210, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %276, ptr addrspace(3) %244, align 2
  %277 = shufflevector <2 x half> %211, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %277, ptr addrspace(3) %245, align 2
  %278 = shufflevector <2 x half> %211, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %278, ptr addrspace(3) %246, align 2
  %279 = shufflevector <2 x half> %214, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %279, ptr addrspace(3) %247, align 2
  %280 = shufflevector <2 x half> %214, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %280, ptr addrspace(3) %248, align 2
  %281 = shufflevector <2 x half> %215, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %281, ptr addrspace(3) %249, align 2
  %282 = shufflevector <2 x half> %215, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %282, ptr addrspace(3) %250, align 2
  %283 = shufflevector <2 x half> %218, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %283, ptr addrspace(3) %251, align 2
  %284 = shufflevector <2 x half> %218, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %284, ptr addrspace(3) %252, align 2
  %285 = shufflevector <2 x half> %219, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %285, ptr addrspace(3) %253, align 2
  %286 = shufflevector <2 x half> %219, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %286, ptr addrspace(3) %254, align 2
  %287 = shufflevector <2 x half> %222, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %287, ptr addrspace(3) %255, align 2
  %288 = shufflevector <2 x half> %222, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %288, ptr addrspace(3) %256, align 2
  %289 = shufflevector <2 x half> %223, <2 x half> undef, <1 x i32> zeroinitializer
  store <1 x half> %289, ptr addrspace(3) %257, align 2
  %290 = shufflevector <2 x half> %223, <2 x half> undef, <1 x i32> <i32 1>
  store <1 x half> %290, ptr addrspace(3) %258, align 2
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %291 = select i1 %129, i32 512, i32 0
  %292 = or i32 %291, %23
  %293 = or i32 %292, %29
  %294 = or i32 %292, 128
  %295 = or i32 %294, %29
  %296 = or i32 %292, 256
  %297 = or i32 %296, %29
  %298 = or i32 %292, 384
  %299 = or i32 %298, %29
  %300 = or i32 %29, 1024
  %301 = or i32 %300, %292
  %302 = or i32 %294, %300
  %303 = or i32 %296, %300
  %304 = or i32 %298, %300
  %305 = or i32 %29, 2048
  %306 = or i32 %305, %292
  %307 = or i32 %294, %305
  %308 = or i32 %296, %305
  %309 = or i32 %298, %305
  %310 = or i32 %29, 3072
  %311 = or i32 %310, %292
  %312 = or i32 %294, %310
  %313 = or i32 %296, %310
  %314 = or i32 %298, %310
  %315 = or i32 %29, 4096
  %316 = or i32 %315, %292
  %317 = or i32 %294, %315
  %318 = or i32 %296, %315
  %319 = or i32 %298, %315
  %320 = or i32 %29, 5120
  %321 = or i32 %320, %292
  %322 = or i32 %294, %320
  %323 = or i32 %296, %320
  %324 = or i32 %298, %320
  %325 = or i32 %29, 6144
  %326 = or i32 %325, %292
  %327 = or i32 %294, %325
  %328 = or i32 %296, %325
  %329 = or i32 %298, %325
  %330 = or i32 %29, 7168
  %331 = or i32 %330, %292
  %332 = or i32 %294, %330
  %333 = or i32 %296, %330
  %334 = or i32 %298, %330
  %335 = zext i32 %293 to i64
  %336 = getelementptr half, ptr addrspace(3) @global_smem, i64 %335
  %337 = load half, ptr addrspace(3) %336, align 2
  %338 = insertelement <4 x half> undef, half %337, i64 0
  %339 = zext i32 %295 to i64
  %340 = getelementptr half, ptr addrspace(3) @global_smem, i64 %339
  %341 = load half, ptr addrspace(3) %340, align 2
  %342 = insertelement <4 x half> %338, half %341, i64 1
  %343 = zext i32 %297 to i64
  %344 = getelementptr half, ptr addrspace(3) @global_smem, i64 %343
  %345 = load half, ptr addrspace(3) %344, align 2
  %346 = insertelement <4 x half> %342, half %345, i64 2
  %347 = zext i32 %299 to i64
  %348 = getelementptr half, ptr addrspace(3) @global_smem, i64 %347
  %349 = load half, ptr addrspace(3) %348, align 2
  %350 = insertelement <4 x half> %346, half %349, i64 3
  %351 = zext i32 %301 to i64
  %352 = getelementptr half, ptr addrspace(3) @global_smem, i64 %351
  %353 = load half, ptr addrspace(3) %352, align 2
  %354 = insertelement <4 x half> undef, half %353, i64 0
  %355 = zext i32 %302 to i64
  %356 = getelementptr half, ptr addrspace(3) @global_smem, i64 %355
  %357 = load half, ptr addrspace(3) %356, align 2
  %358 = insertelement <4 x half> %354, half %357, i64 1
  %359 = zext i32 %303 to i64
  %360 = getelementptr half, ptr addrspace(3) @global_smem, i64 %359
  %361 = load half, ptr addrspace(3) %360, align 2
  %362 = insertelement <4 x half> %358, half %361, i64 2
  %363 = zext i32 %304 to i64
  %364 = getelementptr half, ptr addrspace(3) @global_smem, i64 %363
  %365 = load half, ptr addrspace(3) %364, align 2
  %366 = insertelement <4 x half> %362, half %365, i64 3
  %367 = zext i32 %306 to i64
  %368 = getelementptr half, ptr addrspace(3) @global_smem, i64 %367
  %369 = load half, ptr addrspace(3) %368, align 2
  %370 = insertelement <4 x half> undef, half %369, i64 0
  %371 = zext i32 %307 to i64
  %372 = getelementptr half, ptr addrspace(3) @global_smem, i64 %371
  %373 = load half, ptr addrspace(3) %372, align 2
  %374 = insertelement <4 x half> %370, half %373, i64 1
  %375 = zext i32 %308 to i64
  %376 = getelementptr half, ptr addrspace(3) @global_smem, i64 %375
  %377 = load half, ptr addrspace(3) %376, align 2
  %378 = insertelement <4 x half> %374, half %377, i64 2
  %379 = zext i32 %309 to i64
  %380 = getelementptr half, ptr addrspace(3) @global_smem, i64 %379
  %381 = load half, ptr addrspace(3) %380, align 2
  %382 = insertelement <4 x half> %378, half %381, i64 3
  %383 = zext i32 %311 to i64
  %384 = getelementptr half, ptr addrspace(3) @global_smem, i64 %383
  %385 = load half, ptr addrspace(3) %384, align 2
  %386 = insertelement <4 x half> undef, half %385, i64 0
  %387 = zext i32 %312 to i64
  %388 = getelementptr half, ptr addrspace(3) @global_smem, i64 %387
  %389 = load half, ptr addrspace(3) %388, align 2
  %390 = insertelement <4 x half> %386, half %389, i64 1
  %391 = zext i32 %313 to i64
  %392 = getelementptr half, ptr addrspace(3) @global_smem, i64 %391
  %393 = load half, ptr addrspace(3) %392, align 2
  %394 = insertelement <4 x half> %390, half %393, i64 2
  %395 = zext i32 %314 to i64
  %396 = getelementptr half, ptr addrspace(3) @global_smem, i64 %395
  %397 = load half, ptr addrspace(3) %396, align 2
  %398 = insertelement <4 x half> %394, half %397, i64 3
  %399 = zext i32 %316 to i64
  %400 = getelementptr half, ptr addrspace(3) @global_smem, i64 %399
  %401 = load half, ptr addrspace(3) %400, align 2
  %402 = insertelement <4 x half> undef, half %401, i64 0
  %403 = zext i32 %317 to i64
  %404 = getelementptr half, ptr addrspace(3) @global_smem, i64 %403
  %405 = load half, ptr addrspace(3) %404, align 2
  %406 = insertelement <4 x half> %402, half %405, i64 1
  %407 = zext i32 %318 to i64
  %408 = getelementptr half, ptr addrspace(3) @global_smem, i64 %407
  %409 = load half, ptr addrspace(3) %408, align 2
  %410 = insertelement <4 x half> %406, half %409, i64 2
  %411 = zext i32 %319 to i64
  %412 = getelementptr half, ptr addrspace(3) @global_smem, i64 %411
  %413 = load half, ptr addrspace(3) %412, align 2
  %414 = insertelement <4 x half> %410, half %413, i64 3
  %415 = zext i32 %321 to i64
  %416 = getelementptr half, ptr addrspace(3) @global_smem, i64 %415
  %417 = load half, ptr addrspace(3) %416, align 2
  %418 = insertelement <4 x half> undef, half %417, i64 0
  %419 = zext i32 %322 to i64
  %420 = getelementptr half, ptr addrspace(3) @global_smem, i64 %419
  %421 = load half, ptr addrspace(3) %420, align 2
  %422 = insertelement <4 x half> %418, half %421, i64 1
  %423 = zext i32 %323 to i64
  %424 = getelementptr half, ptr addrspace(3) @global_smem, i64 %423
  %425 = load half, ptr addrspace(3) %424, align 2
  %426 = insertelement <4 x half> %422, half %425, i64 2
  %427 = zext i32 %324 to i64
  %428 = getelementptr half, ptr addrspace(3) @global_smem, i64 %427
  %429 = load half, ptr addrspace(3) %428, align 2
  %430 = insertelement <4 x half> %426, half %429, i64 3
  %431 = zext i32 %326 to i64
  %432 = getelementptr half, ptr addrspace(3) @global_smem, i64 %431
  %433 = load half, ptr addrspace(3) %432, align 2
  %434 = insertelement <4 x half> undef, half %433, i64 0
  %435 = zext i32 %327 to i64
  %436 = getelementptr half, ptr addrspace(3) @global_smem, i64 %435
  %437 = load half, ptr addrspace(3) %436, align 2
  %438 = insertelement <4 x half> %434, half %437, i64 1
  %439 = zext i32 %328 to i64
  %440 = getelementptr half, ptr addrspace(3) @global_smem, i64 %439
  %441 = load half, ptr addrspace(3) %440, align 2
  %442 = insertelement <4 x half> %438, half %441, i64 2
  %443 = zext i32 %329 to i64
  %444 = getelementptr half, ptr addrspace(3) @global_smem, i64 %443
  %445 = load half, ptr addrspace(3) %444, align 2
  %446 = insertelement <4 x half> %442, half %445, i64 3
  %447 = zext i32 %331 to i64
  %448 = getelementptr half, ptr addrspace(3) @global_smem, i64 %447
  %449 = load half, ptr addrspace(3) %448, align 2
  %450 = insertelement <4 x half> undef, half %449, i64 0
  %451 = zext i32 %332 to i64
  %452 = getelementptr half, ptr addrspace(3) @global_smem, i64 %451
  %453 = load half, ptr addrspace(3) %452, align 2
  %454 = insertelement <4 x half> %450, half %453, i64 1
  %455 = zext i32 %333 to i64
  %456 = getelementptr half, ptr addrspace(3) @global_smem, i64 %455
  %457 = load half, ptr addrspace(3) %456, align 2
  %458 = insertelement <4 x half> %454, half %457, i64 2
  %459 = zext i32 %334 to i64
  %460 = getelementptr half, ptr addrspace(3) @global_smem, i64 %459
  %461 = load half, ptr addrspace(3) %460, align 2
  %462 = insertelement <4 x half> %458, half %461, i64 3
  %463 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %142, <4 x half> %350, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %464 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %145, <4 x half> %366, <16 x float> %463, i32 0, i32 0, i32 0)
  %465 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %148, <4 x half> %382, <16 x float> %464, i32 0, i32 0, i32 0)
  %466 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %151, <4 x half> %398, <16 x float> %465, i32 0, i32 0, i32 0)
  %467 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %154, <4 x half> %414, <16 x float> %466, i32 0, i32 0, i32 0)
  %468 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %157, <4 x half> %430, <16 x float> %467, i32 0, i32 0, i32 0)
  %469 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %160, <4 x half> %446, <16 x float> %468, i32 0, i32 0, i32 0)
  %470 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %163, <4 x half> %462, <16 x float> %469, i32 0, i32 0, i32 0)
  %471 = mul i32 %38, %5
  %472 = mul i32 %39, %5
  %473 = mul i32 %40, %5
  %474 = sext i32 %471 to i64
  %475 = getelementptr float, ptr addrspace(1) %2, i64 %474
  %476 = sext i32 %472 to i64
  %477 = getelementptr float, ptr addrspace(1) %2, i64 %476
  %478 = sext i32 %473 to i64
  %479 = getelementptr float, ptr addrspace(1) %2, i64 %478
  %480 = sext i32 %47 to i64
  %481 = sext i32 %48 to i64
  %482 = sext i32 %49 to i64
  %483 = sext i32 %46 to i64
  %484 = getelementptr float, ptr addrspace(1) %475, i64 %483
  %485 = getelementptr float, ptr addrspace(1) %475, i64 %480
  %486 = getelementptr float, ptr addrspace(1) %475, i64 %481
  %487 = getelementptr float, ptr addrspace(1) %475, i64 %482
  %488 = getelementptr float, ptr addrspace(1) %477, i64 %483
  %489 = getelementptr float, ptr addrspace(1) %477, i64 %480
  %490 = getelementptr float, ptr addrspace(1) %477, i64 %481
  %491 = getelementptr float, ptr addrspace(1) %477, i64 %482
  %492 = getelementptr float, ptr addrspace(1) %479, i64 %483
  %493 = getelementptr float, ptr addrspace(1) %479, i64 %480
  %494 = getelementptr float, ptr addrspace(1) %479, i64 %481
  %495 = getelementptr float, ptr addrspace(1) %479, i64 %482
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %496 = mul nuw nsw i32 %14, 528
  %497 = add nuw nsw i32 %30, %496
  %498 = zext i32 %497 to i64
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i64 %498
  %500 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> zeroinitializer
  store <1 x float> %500, ptr addrspace(3) %499, align 4
  %501 = add nuw nsw i32 %497, 132
  %502 = zext i32 %501 to i64
  %503 = getelementptr float, ptr addrspace(3) @global_smem, i64 %502
  %504 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 1>
  store <1 x float> %504, ptr addrspace(3) %503, align 4
  %505 = add nuw nsw i32 %497, 264
  %506 = zext i32 %505 to i64
  %507 = getelementptr float, ptr addrspace(3) @global_smem, i64 %506
  %508 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 2>
  store <1 x float> %508, ptr addrspace(3) %507, align 4
  %509 = add nuw nsw i32 %497, 396
  %510 = zext i32 %509 to i64
  %511 = getelementptr float, ptr addrspace(3) @global_smem, i64 %510
  %512 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 3>
  store <1 x float> %512, ptr addrspace(3) %511, align 4
  %513 = add nuw nsw i32 %497, 1056
  %514 = zext i32 %513 to i64
  %515 = getelementptr float, ptr addrspace(3) @global_smem, i64 %514
  %516 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 4>
  store <1 x float> %516, ptr addrspace(3) %515, align 4
  %517 = add nuw nsw i32 %497, 1188
  %518 = zext i32 %517 to i64
  %519 = getelementptr float, ptr addrspace(3) @global_smem, i64 %518
  %520 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 5>
  store <1 x float> %520, ptr addrspace(3) %519, align 4
  %521 = add nuw nsw i32 %497, 1320
  %522 = zext i32 %521 to i64
  %523 = getelementptr float, ptr addrspace(3) @global_smem, i64 %522
  %524 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 6>
  store <1 x float> %524, ptr addrspace(3) %523, align 4
  %525 = add nuw nsw i32 %497, 1452
  %526 = zext i32 %525 to i64
  %527 = getelementptr float, ptr addrspace(3) @global_smem, i64 %526
  %528 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 7>
  store <1 x float> %528, ptr addrspace(3) %527, align 4
  %529 = add nuw nsw i32 %497, 2112
  %530 = zext i32 %529 to i64
  %531 = getelementptr float, ptr addrspace(3) @global_smem, i64 %530
  %532 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 8>
  store <1 x float> %532, ptr addrspace(3) %531, align 4
  %533 = add nuw nsw i32 %497, 2244
  %534 = zext i32 %533 to i64
  %535 = getelementptr float, ptr addrspace(3) @global_smem, i64 %534
  %536 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 9>
  store <1 x float> %536, ptr addrspace(3) %535, align 4
  %537 = add nuw nsw i32 %497, 2376
  %538 = zext i32 %537 to i64
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i64 %538
  %540 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 10>
  store <1 x float> %540, ptr addrspace(3) %539, align 4
  %541 = add nuw nsw i32 %497, 2508
  %542 = zext i32 %541 to i64
  %543 = getelementptr float, ptr addrspace(3) @global_smem, i64 %542
  %544 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 11>
  store <1 x float> %544, ptr addrspace(3) %543, align 4
  %545 = add nuw nsw i32 %497, 3168
  %546 = zext i32 %545 to i64
  %547 = getelementptr float, ptr addrspace(3) @global_smem, i64 %546
  %548 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 12>
  store <1 x float> %548, ptr addrspace(3) %547, align 4
  %549 = add nuw nsw i32 %497, 3300
  %550 = zext i32 %549 to i64
  %551 = getelementptr float, ptr addrspace(3) @global_smem, i64 %550
  %552 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 13>
  store <1 x float> %552, ptr addrspace(3) %551, align 4
  %553 = add nuw nsw i32 %497, 3432
  %554 = zext i32 %553 to i64
  %555 = getelementptr float, ptr addrspace(3) @global_smem, i64 %554
  %556 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 14>
  store <1 x float> %556, ptr addrspace(3) %555, align 4
  %557 = add nuw nsw i32 %497, 3564
  %558 = zext i32 %557 to i64
  %559 = getelementptr float, ptr addrspace(3) @global_smem, i64 %558
  %560 = shufflevector <16 x float> %470, <16 x float> undef, <1 x i32> <i32 15>
  store <1 x float> %560, ptr addrspace(3) %559, align 4
  fence syncscope("workgroup") release
  tail call void @llvm.amdgcn.s.barrier()
  fence syncscope("workgroup") acquire
  %561 = mul nuw nsw i32 %18, 132
  %562 = add nuw nsw i32 %561, %24
  %563 = zext i32 %562 to i64
  %564 = getelementptr float, ptr addrspace(3) @global_smem, i64 %563
  %565 = load float, ptr addrspace(3) %564, align 16
  %566 = getelementptr inbounds <4 x float>, ptr addrspace(3) %564, i64 0, i64 1
  %567 = load float, ptr addrspace(3) %566, align 4
  %568 = getelementptr inbounds <4 x float>, ptr addrspace(3) %564, i64 0, i64 2
  %569 = load float, ptr addrspace(3) %568, align 8
  %570 = getelementptr inbounds <4 x float>, ptr addrspace(3) %564, i64 0, i64 3
  %571 = load float, ptr addrspace(3) %570, align 4
  %572 = mul nuw nsw i32 %19, 132
  %573 = add nuw nsw i32 %572, %24
  %574 = zext i32 %573 to i64
  %575 = getelementptr float, ptr addrspace(3) @global_smem, i64 %574
  %576 = load float, ptr addrspace(3) %575, align 16
  %577 = getelementptr inbounds <4 x float>, ptr addrspace(3) %575, i64 0, i64 1
  %578 = load float, ptr addrspace(3) %577, align 4
  %579 = getelementptr inbounds <4 x float>, ptr addrspace(3) %575, i64 0, i64 2
  %580 = load float, ptr addrspace(3) %579, align 8
  %581 = getelementptr inbounds <4 x float>, ptr addrspace(3) %575, i64 0, i64 3
  %582 = load float, ptr addrspace(3) %581, align 4
  %583 = mul nuw nsw i32 %20, 132
  %584 = add nuw nsw i32 %583, %24
  %585 = zext i32 %584 to i64
  %586 = getelementptr float, ptr addrspace(3) @global_smem, i64 %585
  %587 = load float, ptr addrspace(3) %586, align 16
  %588 = getelementptr inbounds <4 x float>, ptr addrspace(3) %586, i64 0, i64 1
  %589 = load float, ptr addrspace(3) %588, align 4
  %590 = getelementptr inbounds <4 x float>, ptr addrspace(3) %586, i64 0, i64 2
  %591 = load float, ptr addrspace(3) %590, align 8
  %592 = getelementptr inbounds <4 x float>, ptr addrspace(3) %586, i64 0, i64 3
  %593 = load float, ptr addrspace(3) %592, align 4
  %594 = shl i32 %7, 4
  %595 = icmp slt i32 %594, 4096
  %596 = and i1 %595, %74
  br i1 %596, label %597, label %620

597:                                              ; preds = %187
  %598 = mul nuw nsw i32 %17, 132
  %599 = add nuw nsw i32 %598, %24
  %600 = zext i32 %599 to i64
  %601 = getelementptr float, ptr addrspace(3) @global_smem, i64 %600
  %602 = getelementptr inbounds <4 x float>, ptr addrspace(3) %601, i64 0, i64 3
  %603 = load float, ptr addrspace(3) %602, align 4
  %604 = getelementptr inbounds <4 x float>, ptr addrspace(3) %601, i64 0, i64 2
  %605 = load float, ptr addrspace(3) %604, align 8
  %606 = getelementptr inbounds <4 x float>, ptr addrspace(3) %601, i64 0, i64 1
  %607 = load float, ptr addrspace(3) %606, align 4
  %608 = mul i32 %37, %5
  %609 = sext i32 %608 to i64
  %610 = getelementptr float, ptr addrspace(1) %2, i64 %609
  %611 = getelementptr float, ptr addrspace(1) %610, i64 %482
  %612 = getelementptr float, ptr addrspace(1) %610, i64 %481
  %613 = getelementptr float, ptr addrspace(1) %610, i64 %480
  %614 = load float, ptr addrspace(3) %601, align 16
  %615 = getelementptr float, ptr addrspace(1) %610, i64 %483
  %616 = atomicrmw fadd ptr addrspace(1) %615, float %614 syncscope("agent") monotonic, align 4
  %617 = atomicrmw fadd ptr addrspace(1) %613, float %607 syncscope("agent") monotonic, align 4
  %618 = atomicrmw fadd ptr addrspace(1) %612, float %605 syncscope("agent") monotonic, align 4
  %619 = atomicrmw fadd ptr addrspace(1) %611, float %603 syncscope("agent") monotonic, align 4
  br label %620

620:                                              ; preds = %187, %597
  %621 = and i1 %595, %75
  br i1 %621, label %622, label %627

622:                                              ; preds = %620
  %623 = atomicrmw fadd ptr addrspace(1) %484, float %565 syncscope("agent") monotonic, align 4
  %624 = atomicrmw fadd ptr addrspace(1) %485, float %567 syncscope("agent") monotonic, align 4
  %625 = atomicrmw fadd ptr addrspace(1) %486, float %569 syncscope("agent") monotonic, align 4
  %626 = atomicrmw fadd ptr addrspace(1) %487, float %571 syncscope("agent") monotonic, align 4
  br label %627

627:                                              ; preds = %620, %622
  %628 = and i1 %595, %76
  br i1 %628, label %629, label %634

629:                                              ; preds = %627
  %630 = atomicrmw fadd ptr addrspace(1) %488, float %576 syncscope("agent") monotonic, align 4
  %631 = atomicrmw fadd ptr addrspace(1) %489, float %578 syncscope("agent") monotonic, align 4
  %632 = atomicrmw fadd ptr addrspace(1) %490, float %580 syncscope("agent") monotonic, align 4
  %633 = atomicrmw fadd ptr addrspace(1) %491, float %582 syncscope("agent") monotonic, align 4
  br label %634

634:                                              ; preds = %627, %629
  %635 = and i1 %595, %77
  br i1 %635, label %636, label %641

636:                                              ; preds = %634
  %637 = atomicrmw fadd ptr addrspace(1) %492, float %587 syncscope("agent") monotonic, align 4
  %638 = atomicrmw fadd ptr addrspace(1) %493, float %589 syncscope("agent") monotonic, align 4
  %639 = atomicrmw fadd ptr addrspace(1) %494, float %591 syncscope("agent") monotonic, align 4
  %640 = atomicrmw fadd ptr addrspace(1) %495, float %593 syncscope("agent") monotonic, align 4
  br label %641

641:                                              ; preds = %634, %636
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.y() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

attributes #0 = { mustprogress nofree nounwind willreturn "amdgpu-flat-work-group-size"="1, 1024" "amdgpu-unsafe-fp-atomics"="true" "denormal-fp-math-f32"="preserve-sign" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!nvvm.annotations = !{!0}
!opencl.ocl.version = !{!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1}
!llvm.ident = !{}
!llvm.module.flags = !{!3, !4}

!0 = !{ptr @matmul_kernel_0d1d2d3d4c5d6c7d8c, !"kernel", i32 1}
!1 = !{i32 2, i32 0}
!2 = !{!"AMD clang version 14.0.0 (https://github.com/RadeonOpenCompute/llvm-project roc-5.2.0 22204 50d6d5d5b608d2abd6af44314abc6ad20036af3b)"}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 8, !"PIC Level", i32 1}
