module {
  tt.func public @matmul_kernel_splitK_0d1d2d3c4d5d6d7c8d9c10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c63_i32 = arith.constant 63 : i32
    %c255_i32 = arith.constant 255 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<1> : tensor<128x1xi32>
    %cst_0 = arith.constant dense<64> : tensor<128x64xi32>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x256xf32>
    %c256_i32 = arith.constant 256 : i32
    %c128_i32 = arith.constant 128 : i32
    %c64_i32 = arith.constant 64 : i32
    %c8_i32 = arith.constant 8 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.addi %arg3, %c255_i32 : i32
    %3 = arith.divsi %2, %c256_i32 : i32
    %4 = arith.muli %3, %c8_i32 : i32
    %5 = arith.divsi %0, %4 : i32
    %6 = arith.muli %5, %c8_i32 : i32
    %7 = arith.subi %c1_i32, %6 : i32
    %8 = arith.cmpi slt, %7, %c8_i32 : i32
    %9 = arith.select %8, %7, %c8_i32 : i32
    %10 = arith.remsi %0, %9 : i32
    %11 = arith.addi %6, %10 : i32
    %12 = arith.remsi %0, %4 : i32
    %13 = arith.divsi %12, %9 : i32
    %14 = arith.muli %1, %c64_i32 : i32
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %16 = tt.splat %14 : (i32) -> tensor<64xi32>
    %17 = arith.addi %16, %15 : tensor<64xi32>
    %18 = arith.muli %11, %c128_i32 : i32
    %19 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %20 = tt.splat %18 : (i32) -> tensor<128xi32>
    %21 = arith.addi %20, %19 : tensor<128xi32>
    %22 = arith.muli %13, %c256_i32 : i32
    %23 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %24 = tt.splat %22 : (i32) -> tensor<256xi32>
    %25 = arith.addi %24, %23 : tensor<256xi32>
    %26 = tt.expand_dims %21 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32>
    %27 = tt.splat %arg5 : (i32) -> tensor<128x1xi32>
    %28 = arith.muli %26, %27 : tensor<128x1xi32>
    %29 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>>
    %30 = tt.addptr %29, %28 : tensor<128x1x!tt.ptr<f16>>, tensor<128x1xi32>
    %31 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %32 = tt.broadcast %30 : (tensor<128x1x!tt.ptr<f16>>) -> tensor<128x64x!tt.ptr<f16>>
    %33 = tt.broadcast %31 : (tensor<1x64xi32>) -> tensor<128x64xi32>
    %34 = tt.addptr %32, %33 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi32>
    %35 = tt.expand_dims %17 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %36 = tt.splat %arg6 : (i32) -> tensor<64x1xi32>
    %37 = arith.muli %35, %36 : tensor<64x1xi32>
    %38 = tt.splat %arg1 : (!tt.ptr<i8>) -> tensor<64x1x!tt.ptr<i8>>
    %39 = tt.addptr %38, %37 : tensor<64x1x!tt.ptr<i8>>, tensor<64x1xi32>
    %40 = tt.expand_dims %25 {axis = 0 : i32} : (tensor<256xi32>) -> tensor<1x256xi32>
    %41 = tt.broadcast %39 : (tensor<64x1x!tt.ptr<i8>>) -> tensor<64x256x!tt.ptr<i8>>
    %42 = tt.broadcast %40 : (tensor<1x256xi32>) -> tensor<64x256xi32>
    %43 = tt.addptr %41, %42 : tensor<64x256x!tt.ptr<i8>>, tensor<64x256xi32>
    %44 = arith.addi %arg4, %c63_i32 : i32
    %45 = arith.divsi %44, %c64_i32 : i32
    %46 = arith.muli %arg6, %c64_i32 : i32
    %47 = tt.splat %46 : (i32) -> tensor<64x256xi32>
    %48:3 = scf.for %arg8 = %c0_i32 to %45 step %c1_i32 iter_args(%arg9 = %cst_1, %arg10 = %34, %arg11 = %43) -> (tensor<128x256xf32>, tensor<128x64x!tt.ptr<f16>>, tensor<64x256x!tt.ptr<i8>>)  : i32 {
      %63 = tt.load %arg10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>
      %64 = tt.load %arg11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x256xi8>
      %65 = tt.bitcast %64 : tensor<64x256xi8> -> tensor<64x256xf8E5M2>
      %66 = tt.fp_to_fp %65 : tensor<64x256xf8E5M2> -> tensor<64x256xf32>
      %67 = arith.truncf %66 : tensor<64x256xf32> to tensor<64x256xf16>
      %68 = tt.dot %63, %67, %arg9 {allowTF32 = true} : tensor<128x64xf16> * tensor<64x256xf16> -> tensor<128x256xf32>
      %69 = tt.addptr %arg10, %cst_0 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi32>
      %70 = tt.addptr %arg11, %47 : tensor<64x256x!tt.ptr<i8>>, tensor<64x256xi32>
      scf.yield %68, %69, %70 : tensor<128x256xf32>, tensor<128x64x!tt.ptr<f16>>, tensor<64x256x!tt.ptr<i8>>
    }
    %49 = arith.truncf %48#0 : tensor<128x256xf32> to tensor<128x256xf16>
    %50 = tt.splat %arg7 : (i32) -> tensor<128x1xi32>
    %51 = arith.muli %50, %26 : tensor<128x1xi32>
    %52 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>>
    %53 = tt.addptr %52, %51 : tensor<128x1x!tt.ptr<f16>>, tensor<128x1xi32>
    %54 = tt.broadcast %53 : (tensor<128x1x!tt.ptr<f16>>) -> tensor<128x256x!tt.ptr<f16>>
    %55 = tt.broadcast %40 : (tensor<1x256xi32>) -> tensor<128x256xi32>
    %56 = tt.addptr %54, %55 : tensor<128x256x!tt.ptr<f16>>, tensor<128x256xi32>
    %57 = arith.cmpi slt, %26, %cst : tensor<128x1xi32>
    %58 = tt.splat %arg3 : (i32) -> tensor<1x256xi32>
    %59 = arith.cmpi slt, %40, %58 : tensor<1x256xi32>
    %60 = tt.broadcast %57 : (tensor<128x1xi1>) -> tensor<128x256xi1>
    %61 = tt.broadcast %59 : (tensor<1x256xi1>) -> tensor<128x256xi1>
    %62 = arith.andi %60, %61 : tensor<128x256xi1>
    tt.store %56, %49, %62 {cache = 1 : i32, evict = 1 : i32} : tensor<128x256xf16>
    tt.return
  }
}
