#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_splitK_0d1d2d3c4d5d6d7c8d9c10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
    %cst_0 = arith.constant dense<64> : tensor<128x64xi32, #blocked>
    %cst_1 = arith.constant dense<1> : tensor<128x1xi32, #blocked1>
    %c63_i32 = arith.constant 63 : i32
    %c255_i32 = arith.constant 255 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c256_i32 = arith.constant 256 : i32
    %c128_i32 = arith.constant 128 : i32
    %c64_i32 = arith.constant 64 : i32
    %c8_i32 = arith.constant 8 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.addi %arg3, %c255_i32 : i32
    %3 = arith.divsi %2, %c256_i32 : i32
    %4 = arith.muli %3, %c8_i32 : i32
    %5 = arith.divsi %0, %4 : i32
    %6 = arith.muli %5, %c8_i32 : i32
    %7 = arith.subi %c1_i32, %6 : i32
    %8 = "triton_gpu.cmpi"(%7, %c8_i32) <{predicate = 2 : i64}> : (i32, i32) -> i1
    %9 = arith.select %8, %7, %c8_i32 : i32
    %10 = arith.remsi %0, %9 : i32
    %11 = arith.addi %6, %10 : i32
    %12 = arith.remsi %0, %4 : i32
    %13 = arith.divsi %12, %9 : i32
    %14 = arith.muli %1, %c64_i32 : i32
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %17 = tt.splat %14 : (i32) -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %18 = tt.splat %14 : (i32) -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %19 = arith.addi %17, %15 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %20 = arith.addi %18, %16 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %21 = arith.muli %11, %c128_i32 : i32
    %22 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %23 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %24 = tt.splat %21 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %25 = tt.splat %21 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %26 = arith.addi %24, %22 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %27 = arith.addi %25, %23 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %28 = arith.muli %13, %c256_i32 : i32
    %29 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %30 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %31 = tt.splat %28 : (i32) -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %32 = tt.splat %28 : (i32) -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %33 = arith.addi %31, %29 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %34 = arith.addi %32, %30 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %35 = tt.expand_dims %26 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<128x1xi32, #blocked>
    %36 = tt.expand_dims %27 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>
    %37 = tt.splat %arg5 : (i32) -> tensor<128x1xi32, #blocked>
    %38 = arith.muli %35, %37 : tensor<128x1xi32, #blocked>
    %39 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>, #blocked>
    %40 = tt.addptr %39, %38 : tensor<128x1x!tt.ptr<f16>, #blocked>, tensor<128x1xi32, #blocked>
    %41 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked>
    %42 = tt.broadcast %40 : (tensor<128x1x!tt.ptr<f16>, #blocked>) -> tensor<128x64x!tt.ptr<f16>, #blocked>
    %43 = tt.broadcast %41 : (tensor<1x64xi32, #blocked>) -> tensor<128x64xi32, #blocked>
    %44 = tt.addptr %42, %43 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked>
    %45 = tt.expand_dims %19 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2>
    %46 = tt.splat %arg6 : (i32) -> tensor<64x1xi32, #blocked2>
    %47 = arith.muli %45, %46 : tensor<64x1xi32, #blocked2>
    %48 = tt.splat %arg1 : (!tt.ptr<i8>) -> tensor<64x1x!tt.ptr<i8>, #blocked2>
    %49 = tt.addptr %48, %47 : tensor<64x1x!tt.ptr<i8>, #blocked2>, tensor<64x1xi32, #blocked2>
    %50 = tt.expand_dims %33 {axis = 0 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x256xi32, #blocked2>
    %51 = tt.expand_dims %34 {axis = 0 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x256xi32, #blocked1>
    %52 = tt.broadcast %49 : (tensor<64x1x!tt.ptr<i8>, #blocked2>) -> tensor<64x256x!tt.ptr<i8>, #blocked2>
    %53 = tt.broadcast %50 : (tensor<1x256xi32, #blocked2>) -> tensor<64x256xi32, #blocked2>
    %54 = tt.addptr %52, %53 : tensor<64x256x!tt.ptr<i8>, #blocked2>, tensor<64x256xi32, #blocked2>
    %55 = arith.addi %arg4, %c63_i32 : i32
    %56 = arith.divsi %55, %c64_i32 : i32
    %57 = arith.muli %arg6, %c64_i32 : i32
    %58 = tt.splat %57 : (i32) -> tensor<64x256xi32, #blocked2>
    %59:3 = scf.for %arg8 = %c0_i32 to %56 step %c1_i32 iter_args(%arg9 = %cst, %arg10 = %44, %arg11 = %54) -> (tensor<128x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>, tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<i8>, #blocked2>)  : i32 {
      %75 = tt.load %arg10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16, #blocked>
      %76 = triton_gpu.convert_layout %75 : (tensor<128x64xf16, #blocked>) -> tensor<128x64xf16, #shared>
      %77 = triton_gpu.convert_layout %76 : (tensor<128x64xf16, #shared>) -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
      %78 = tt.load %arg11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x256xi8, #blocked2>
      %79 = triton_gpu.convert_layout %78 : (tensor<64x256xi8, #blocked2>) -> tensor<64x256xi8, #shared1>
      %80 = triton_gpu.convert_layout %79 : (tensor<64x256xi8, #shared1>) -> tensor<64x256xi8, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
      %81 = tt.bitcast %80 : tensor<64x256xi8, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> -> tensor<64x256xf8E5M2, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
      %82 = tt.fp_to_fp %81 : tensor<64x256xf8E5M2, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> -> tensor<64x256xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
      %83 = arith.truncf %82 : tensor<64x256xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> to tensor<64x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
      %84 = tt.dot %77, %83, %arg9 {allowTF32 = true} : tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> * tensor<64x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> -> tensor<128x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
      %85 = tt.addptr %arg10, %cst_0 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked>
      %86 = tt.addptr %arg11, %58 : tensor<64x256x!tt.ptr<i8>, #blocked2>, tensor<64x256xi32, #blocked2>
      scf.yield %84, %85, %86 : tensor<128x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>, tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<i8>, #blocked2>
    }
    %60 = arith.truncf %59#0 : tensor<128x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>> to tensor<128x256xf16, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
    %61 = tt.splat %arg7 : (i32) -> tensor<128x1xi32, #blocked1>
    %62 = arith.muli %61, %36 : tensor<128x1xi32, #blocked1>
    %63 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>, #blocked1>
    %64 = tt.addptr %63, %62 : tensor<128x1x!tt.ptr<f16>, #blocked1>, tensor<128x1xi32, #blocked1>
    %65 = tt.broadcast %64 : (tensor<128x1x!tt.ptr<f16>, #blocked1>) -> tensor<128x256x!tt.ptr<f16>, #blocked1>
    %66 = tt.broadcast %51 : (tensor<1x256xi32, #blocked1>) -> tensor<128x256xi32, #blocked1>
    %67 = tt.addptr %65, %66 : tensor<128x256x!tt.ptr<f16>, #blocked1>, tensor<128x256xi32, #blocked1>
    %68 = "triton_gpu.cmpi"(%36, %cst_1) <{predicate = 2 : i64}> : (tensor<128x1xi32, #blocked1>, tensor<128x1xi32, #blocked1>) -> tensor<128x1xi1, #blocked1>
    %69 = tt.splat %arg3 : (i32) -> tensor<1x256xi32, #blocked1>
    %70 = "triton_gpu.cmpi"(%51, %69) <{predicate = 2 : i64}> : (tensor<1x256xi32, #blocked1>, tensor<1x256xi32, #blocked1>) -> tensor<1x256xi1, #blocked1>
    %71 = tt.broadcast %68 : (tensor<128x1xi1, #blocked1>) -> tensor<128x256xi1, #blocked1>
    %72 = tt.broadcast %70 : (tensor<1x256xi1, #blocked1>) -> tensor<128x256xi1, #blocked1>
    %73 = arith.andi %71, %72 : tensor<128x256xi1, #blocked1>
    %74 = triton_gpu.convert_layout %60 : (tensor<128x256xf16, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>) -> tensor<128x256xf16, #blocked1>
    tt.store %67, %74, %73 {cache = 1 : i32, evict = 1 : i32} : tensor<128x256xf16, #blocked1>
    tt.return
  }
}
