module {
  tt.func public @matmul_kernel_0d1d2d3d4c5d6c7d8c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<32> : tensor<128x32xi32>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x128xf32>
    %cst_1 = arith.constant dense<4096> : tensor<1x128xi32>
    %cst_2 = arith.constant dense<4096> : tensor<32x1xi32>
    %cst_3 = arith.constant dense<4096> : tensor<1x32xi32>
    %cst_4 = arith.constant dense<4096> : tensor<128x1xi32>
    %c32_i32 = arith.constant 32 : i32
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.divsi %0, %c32_i32 : i32
    %3 = arith.remsi %0, %c32_i32 : i32
    %4 = arith.muli %2, %c128_i32 : i32
    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %6 = tt.splat %4 : (i32) -> tensor<128xi32>
    %7 = arith.addi %6, %5 : tensor<128xi32>
    %8 = arith.muli %3, %c128_i32 : i32
    %9 = tt.splat %8 : (i32) -> tensor<128xi32>
    %10 = arith.addi %9, %5 : tensor<128xi32>
    %11 = arith.muli %1, %c32_i32 : i32
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %13 = tt.splat %11 : (i32) -> tensor<32xi32>
    %14 = arith.addi %13, %12 : tensor<32xi32>
    %15 = tt.expand_dims %7 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32>
    %16 = tt.splat %arg3 : (i32) -> tensor<128x1xi32>
    %17 = arith.muli %15, %16 : tensor<128x1xi32>
    %18 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>>
    %19 = tt.addptr %18, %17 : tensor<128x1x!tt.ptr<f16>>, tensor<128x1xi32>
    %20 = tt.expand_dims %14 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %21 = tt.broadcast %19 : (tensor<128x1x!tt.ptr<f16>>) -> tensor<128x32x!tt.ptr<f16>>
    %22 = tt.broadcast %20 : (tensor<1x32xi32>) -> tensor<128x32xi32>
    %23 = tt.addptr %21, %22 : tensor<128x32x!tt.ptr<f16>>, tensor<128x32xi32>
    %24 = tt.expand_dims %14 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %25 = tt.splat %arg4 : (i32) -> tensor<32x1xi32>
    %26 = arith.muli %24, %25 : tensor<32x1xi32>
    %27 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>>
    %28 = tt.addptr %27, %26 : tensor<32x1x!tt.ptr<f16>>, tensor<32x1xi32>
    %29 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32>
    %30 = tt.broadcast %28 : (tensor<32x1x!tt.ptr<f16>>) -> tensor<32x128x!tt.ptr<f16>>
    %31 = tt.broadcast %29 : (tensor<1x128xi32>) -> tensor<32x128xi32>
    %32 = tt.addptr %30, %31 : tensor<32x128x!tt.ptr<f16>>, tensor<32x128xi32>
    %33 = arith.cmpi slt, %15, %cst_4 : tensor<128x1xi32>
    %34 = arith.cmpi slt, %20, %cst_3 : tensor<1x32xi32>
    %35 = tt.broadcast %33 : (tensor<128x1xi1>) -> tensor<128x32xi1>
    %36 = tt.broadcast %34 : (tensor<1x32xi1>) -> tensor<128x32xi1>
    %37 = arith.andi %35, %36 : tensor<128x32xi1>
    %38 = arith.cmpi slt, %24, %cst_2 : tensor<32x1xi32>
    %39 = arith.cmpi slt, %29, %cst_1 : tensor<1x128xi32>
    %40 = tt.broadcast %38 : (tensor<32x1xi1>) -> tensor<32x128xi1>
    %41 = tt.broadcast %39 : (tensor<1x128xi1>) -> tensor<32x128xi1>
    %42 = arith.andi %40, %41 : tensor<32x128xi1>
    %43 = arith.muli %arg4, %c32_i32 : i32
    %44 = tt.splat %43 : (i32) -> tensor<32x128xi32>
    %45:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c1_i32 iter_args(%arg7 = %cst_0, %arg8 = %23, %arg9 = %32) -> (tensor<128x128xf32>, tensor<128x32x!tt.ptr<f16>>, tensor<32x128x!tt.ptr<f16>>)  : i32 {
      %56 = tt.load %arg8, %37 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf16>
      %57 = tt.load %arg9, %42 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf16>
      %58 = tt.dot %56, %57, %arg7 {allowTF32 = true} : tensor<128x32xf16> * tensor<32x128xf16> -> tensor<128x128xf32>
      %59 = tt.addptr %arg8, %cst : tensor<128x32x!tt.ptr<f16>>, tensor<128x32xi32>
      %60 = tt.addptr %arg9, %44 : tensor<32x128x!tt.ptr<f16>>, tensor<32x128xi32>
      scf.yield %58, %59, %60 : tensor<128x128xf32>, tensor<128x32x!tt.ptr<f16>>, tensor<32x128x!tt.ptr<f16>>
    }
    %46 = tt.splat %arg5 : (i32) -> tensor<128x1xi32>
    %47 = arith.muli %15, %46 : tensor<128x1xi32>
    %48 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<128x1x!tt.ptr<f32>>
    %49 = tt.addptr %48, %47 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32>
    %50 = tt.broadcast %49 : (tensor<128x1x!tt.ptr<f32>>) -> tensor<128x128x!tt.ptr<f32>>
    %51 = tt.broadcast %29 : (tensor<1x128xi32>) -> tensor<128x128xi32>
    %52 = tt.addptr %50, %51 : tensor<128x128x!tt.ptr<f32>>, tensor<128x128xi32>
    %53 = tt.broadcast %33 : (tensor<128x1xi1>) -> tensor<128x128xi1>
    %54 = tt.broadcast %39 : (tensor<1x128xi1>) -> tensor<128x128xi1>
    %55 = arith.andi %53, %54 : tensor<128x128xi1>
    tt.store %52, %45#0, %55 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf32>
    tt.return
  }
}
