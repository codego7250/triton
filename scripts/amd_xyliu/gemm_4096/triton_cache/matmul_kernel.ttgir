#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 32], warpsPerCTA = [8, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 8 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3d4c5d6c7d8c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c3_i32 = arith.constant 3 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>>
    %cst_0 = arith.constant dense<32> : tensor<128x32xi32, #blocked>
    %cst_1 = arith.constant dense<4096> : tensor<128x1xi32, #blocked>
    %cst_2 = arith.constant dense<4096> : tensor<1x32xi32, #blocked>
    %cst_3 = arith.constant dense<4096> : tensor<32x1xi32, #blocked1>
    %cst_4 = arith.constant dense<4096> : tensor<1x128xi32, #blocked1>
    %cst_5 = arith.constant dense<4096> : tensor<128x1xi32, #blocked2>
    %cst_6 = arith.constant dense<4096> : tensor<1x128xi32, #blocked2>
    %c0_i32 = arith.constant 0 : i32
    %c32_i32 = arith.constant 32 : i32
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.divsi %0, %c32_i32 : i32
    %3 = arith.remsi %0, %c32_i32 : i32
    %4 = arith.muli %2, %c128_i32 : i32
    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %6 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %8 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %9 = tt.splat %4 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = tt.splat %4 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %11 = arith.addi %9, %5 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %12 = arith.addi %10, %7 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>
    %13 = arith.muli %3, %c128_i32 : i32
    %14 = tt.splat %13 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %15 = tt.splat %13 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %16 = arith.addi %14, %6 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %17 = arith.addi %15, %8 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>
    %18 = arith.muli %1, %c32_i32 : i32
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %21 = tt.splat %18 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %22 = tt.splat %18 : (i32) -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %23 = arith.addi %21, %19 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %24 = arith.addi %22, %20 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %25 = tt.expand_dims %11 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<128x1xi32, #blocked>
    %26 = tt.expand_dims %12 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<128x1xi32, #blocked2>
    %27 = tt.splat %arg3 : (i32) -> tensor<128x1xi32, #blocked>
    %28 = arith.muli %25, %27 : tensor<128x1xi32, #blocked>
    %29 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>, #blocked>
    %30 = tt.addptr %29, %28 : tensor<128x1x!tt.ptr<f16>, #blocked>, tensor<128x1xi32, #blocked>
    %31 = tt.expand_dims %23 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %32 = tt.broadcast %30 : (tensor<128x1x!tt.ptr<f16>, #blocked>) -> tensor<128x32x!tt.ptr<f16>, #blocked>
    %33 = tt.broadcast %31 : (tensor<1x32xi32, #blocked>) -> tensor<128x32xi32, #blocked>
    %34 = tt.addptr %32, %33 : tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<128x32xi32, #blocked>
    %35 = tt.expand_dims %24 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %36 = tt.splat %arg4 : (i32) -> tensor<32x1xi32, #blocked1>
    %37 = arith.muli %35, %36 : tensor<32x1xi32, #blocked1>
    %38 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>, #blocked1>
    %39 = tt.addptr %38, %37 : tensor<32x1x!tt.ptr<f16>, #blocked1>, tensor<32x1xi32, #blocked1>
    %40 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x128xi32, #blocked1>
    %41 = tt.expand_dims %17 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x128xi32, #blocked2>
    %42 = tt.broadcast %39 : (tensor<32x1x!tt.ptr<f16>, #blocked1>) -> tensor<32x128x!tt.ptr<f16>, #blocked1>
    %43 = tt.broadcast %40 : (tensor<1x128xi32, #blocked1>) -> tensor<32x128xi32, #blocked1>
    %44 = tt.addptr %42, %43 : tensor<32x128x!tt.ptr<f16>, #blocked1>, tensor<32x128xi32, #blocked1>
    %45 = "triton_gpu.cmpi"(%25, %cst_1) <{predicate = 2 : i64}> : (tensor<128x1xi32, #blocked>, tensor<128x1xi32, #blocked>) -> tensor<128x1xi1, #blocked>
    %46 = "triton_gpu.cmpi"(%26, %cst_5) <{predicate = 2 : i64}> : (tensor<128x1xi32, #blocked2>, tensor<128x1xi32, #blocked2>) -> tensor<128x1xi1, #blocked2>
    %47 = "triton_gpu.cmpi"(%31, %cst_2) <{predicate = 2 : i64}> : (tensor<1x32xi32, #blocked>, tensor<1x32xi32, #blocked>) -> tensor<1x32xi1, #blocked>
    %48 = tt.broadcast %45 : (tensor<128x1xi1, #blocked>) -> tensor<128x32xi1, #blocked>
    %49 = tt.broadcast %47 : (tensor<1x32xi1, #blocked>) -> tensor<128x32xi1, #blocked>
    %50 = arith.andi %48, %49 : tensor<128x32xi1, #blocked>
    %51 = "triton_gpu.cmpi"(%35, %cst_3) <{predicate = 2 : i64}> : (tensor<32x1xi32, #blocked1>, tensor<32x1xi32, #blocked1>) -> tensor<32x1xi1, #blocked1>
    %52 = "triton_gpu.cmpi"(%40, %cst_4) <{predicate = 2 : i64}> : (tensor<1x128xi32, #blocked1>, tensor<1x128xi32, #blocked1>) -> tensor<1x128xi1, #blocked1>
    %53 = "triton_gpu.cmpi"(%41, %cst_6) <{predicate = 2 : i64}> : (tensor<1x128xi32, #blocked2>, tensor<1x128xi32, #blocked2>) -> tensor<1x128xi1, #blocked2>
    %54 = tt.broadcast %51 : (tensor<32x1xi1, #blocked1>) -> tensor<32x128xi1, #blocked1>
    %55 = tt.broadcast %52 : (tensor<1x128xi1, #blocked1>) -> tensor<32x128xi1, #blocked1>
    %56 = arith.andi %54, %55 : tensor<32x128xi1, #blocked1>
    %57 = arith.muli %arg4, %c32_i32 : i32
    %58 = tt.splat %57 : (i32) -> tensor<32x128xi32, #blocked1>
    %59 = triton_gpu.alloc_tensor : tensor<3x128x32xf16, #shared>
    %60 = triton_gpu.insert_slice_async %34, %59, %c0_i32, %50 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32x!tt.ptr<f16>, #blocked> -> tensor<3x128x32xf16, #shared>
    triton_gpu.async_commit_group
    %61 = triton_gpu.alloc_tensor : tensor<3x32x128xf16, #shared>
    %62 = triton_gpu.insert_slice_async %44, %61, %c0_i32, %56 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128x!tt.ptr<f16>, #blocked1> -> tensor<3x32x128xf16, #shared>
    triton_gpu.async_commit_group
    %63 = tt.addptr %34, %cst_0 : tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<128x32xi32, #blocked>
    %64 = tt.addptr %44, %58 : tensor<32x128x!tt.ptr<f16>, #blocked1>, tensor<32x128xi32, #blocked1>
    %65 = triton_gpu.insert_slice_async %63, %60, %c1_i32, %50 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32x!tt.ptr<f16>, #blocked> -> tensor<3x128x32xf16, #shared>
    triton_gpu.async_commit_group
    %66 = triton_gpu.insert_slice_async %64, %62, %c1_i32, %56 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128x!tt.ptr<f16>, #blocked1> -> tensor<3x32x128xf16, #shared>
    triton_gpu.async_commit_group
    triton_gpu.async_wait {num = 2 : i32}
    %67 = triton_gpu.extract_slice %65[0, 0, 0] [1, 128, 32] [1, 1, 1] : tensor<3x128x32xf16, #shared> to tensor<128x32xf16, #shared>
    %68 = triton_gpu.extract_slice %66[0, 0, 0] [1, 32, 128] [1, 1, 1] : tensor<3x32x128xf16, #shared> to tensor<32x128xf16, #shared>
    %69 = triton_gpu.extract_slice %67[0, 0] [128, 16] [1, 1] : tensor<128x32xf16, #shared> to tensor<128x16xf16, #shared>
    %70 = triton_gpu.convert_layout %69 : (tensor<128x16xf16, #shared>) -> tensor<128x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>
    %71 = triton_gpu.extract_slice %68[0, 0] [16, 128] [1, 1] : tensor<32x128xf16, #shared> to tensor<16x128xf16, #shared>
    %72 = triton_gpu.convert_layout %71 : (tensor<16x128xf16, #shared>) -> tensor<16x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>
    %73:14 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c1_i32 iter_args(%arg7 = %cst, %arg8 = %34, %arg9 = %44, %arg10 = %65, %arg11 = %66, %arg12 = %67, %arg13 = %68, %arg14 = %63, %arg15 = %64, %arg16 = %c1_i32, %arg17 = %c2_i32, %arg18 = %c1_i32, %arg19 = %70, %arg20 = %72) -> (tensor<128x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>>, tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<32x128x!tt.ptr<f16>, #blocked1>, tensor<3x128x32xf16, #shared>, tensor<3x32x128xf16, #shared>, tensor<128x32xf16, #shared>, tensor<32x128xf16, #shared>, tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<32x128x!tt.ptr<f16>, #blocked1>, i32, i32, i32, tensor<128x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>, tensor<16x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>)  : i32 {
      %85 = triton_gpu.extract_slice %arg12[0, 16] [128, 16] [1, 1] : tensor<128x32xf16, #shared> to tensor<128x16xf16, #shared>
      %86 = triton_gpu.convert_layout %85 : (tensor<128x16xf16, #shared>) -> tensor<128x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>
      %87 = triton_gpu.extract_slice %arg13[16, 0] [16, 128] [1, 1] : tensor<32x128xf16, #shared> to tensor<16x128xf16, #shared>
      %88 = triton_gpu.convert_layout %87 : (tensor<16x128xf16, #shared>) -> tensor<16x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>
      %89 = tt.dot %arg19, %arg20, %arg7 {allowTF32 = true} : tensor<128x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>> * tensor<16x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>> -> tensor<128x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>>
      %90 = tt.dot %86, %88, %89 {allowTF32 = true} : tensor<128x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>> * tensor<16x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>> -> tensor<128x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>>
      %91 = tt.addptr %arg8, %cst_0 : tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<128x32xi32, #blocked>
      %92 = tt.addptr %arg9, %58 : tensor<32x128x!tt.ptr<f16>, #blocked1>, tensor<32x128xi32, #blocked1>
      %93 = arith.addi %arg16, %c1_i32 : i32
      %94 = arith.cmpi slt, %93, %c128_i32 : i32
      %95 = arith.remsi %arg17, %c3_i32 : i32
      %96 = arith.remsi %arg18, %c3_i32 : i32
      %97 = tt.addptr %arg14, %cst_0 : tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<128x32xi32, #blocked>
      %98 = tt.addptr %arg15, %58 : tensor<32x128x!tt.ptr<f16>, #blocked1>, tensor<32x128xi32, #blocked1>
      %99 = tt.splat %94 : (i1) -> tensor<128x32xi1, #blocked>
      %100 = arith.andi %50, %99 : tensor<128x32xi1, #blocked>
      %101 = triton_gpu.insert_slice_async %97, %arg10, %95, %100 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32x!tt.ptr<f16>, #blocked> -> tensor<3x128x32xf16, #shared>
      triton_gpu.async_commit_group
      %102 = tt.splat %94 : (i1) -> tensor<32x128xi1, #blocked1>
      %103 = arith.andi %56, %102 : tensor<32x128xi1, #blocked1>
      %104 = triton_gpu.insert_slice_async %98, %arg11, %95, %103 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128x!tt.ptr<f16>, #blocked1> -> tensor<3x32x128xf16, #shared>
      triton_gpu.async_commit_group
      triton_gpu.async_wait {num = 2 : i32}
      %105 = triton_gpu.extract_slice %101[%96, 0, 0] [1, 128, 32] [1, 1, 1] : tensor<3x128x32xf16, #shared> to tensor<128x32xf16, #shared>
      %106 = triton_gpu.extract_slice %104[%96, 0, 0] [1, 32, 128] [1, 1, 1] : tensor<3x32x128xf16, #shared> to tensor<32x128xf16, #shared>
      %107 = arith.addi %arg17, %c1_i32 : i32
      %108 = arith.addi %arg18, %c1_i32 : i32
      %109 = triton_gpu.extract_slice %105[0, 0] [128, 16] [1, 1] : tensor<128x32xf16, #shared> to tensor<128x16xf16, #shared>
      %110 = triton_gpu.convert_layout %109 : (tensor<128x16xf16, #shared>) -> tensor<128x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>
      %111 = triton_gpu.extract_slice %106[0, 0] [16, 128] [1, 1] : tensor<32x128xf16, #shared> to tensor<16x128xf16, #shared>
      %112 = triton_gpu.convert_layout %111 : (tensor<16x128xf16, #shared>) -> tensor<16x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>
      scf.yield %90, %91, %92, %101, %104, %105, %106, %97, %98, %93, %107, %108, %110, %112 : tensor<128x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>>, tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<32x128x!tt.ptr<f16>, #blocked1>, tensor<3x128x32xf16, #shared>, tensor<3x32x128xf16, #shared>, tensor<128x32xf16, #shared>, tensor<32x128xf16, #shared>, tensor<128x32x!tt.ptr<f16>, #blocked>, tensor<32x128x!tt.ptr<f16>, #blocked1>, i32, i32, i32, tensor<128x16xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>, tensor<16x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>}>>
    }
    triton_gpu.async_wait {num = 0 : i32}
    %74 = tt.splat %arg5 : (i32) -> tensor<128x1xi32, #blocked2>
    %75 = arith.muli %26, %74 : tensor<128x1xi32, #blocked2>
    %76 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<128x1x!tt.ptr<f32>, #blocked2>
    %77 = tt.addptr %76, %75 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2>
    %78 = tt.broadcast %77 : (tensor<128x1x!tt.ptr<f32>, #blocked2>) -> tensor<128x128x!tt.ptr<f32>, #blocked2>
    %79 = tt.broadcast %41 : (tensor<1x128xi32, #blocked2>) -> tensor<128x128xi32, #blocked2>
    %80 = tt.addptr %78, %79 : tensor<128x128x!tt.ptr<f32>, #blocked2>, tensor<128x128xi32, #blocked2>
    %81 = tt.broadcast %46 : (tensor<128x1xi1, #blocked2>) -> tensor<128x128xi1, #blocked2>
    %82 = tt.broadcast %53 : (tensor<1x128xi1, #blocked2>) -> tensor<128x128xi1, #blocked2>
    %83 = arith.andi %81, %82 : tensor<128x128xi1, #blocked2>
    %84 = triton_gpu.convert_layout %73#0 : (tensor<128x128xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 4], isTransposed = false}>>) -> tensor<128x128xf32, #blocked2>
    tt.store %80, %84, %83 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf32, #blocked2>
    tt.return
  }
}
