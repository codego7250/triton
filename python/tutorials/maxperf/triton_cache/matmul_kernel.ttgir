#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
    %cst_0 = arith.constant dense<32> : tensor<64x32xi32, #blocked>
    %c31_i32 = arith.constant 31 : i32
    %c255_i32 = arith.constant 255 : i32
    %c63_i32 = arith.constant 63 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c256_i32 = arith.constant 256 : i32
    %c64_i32 = arith.constant 64 : i32
    %c8_i32 = arith.constant 8 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.addi %arg3, %c63_i32 : i32
    %2 = arith.divsi %1, %c64_i32 : i32
    %3 = arith.addi %arg4, %c255_i32 : i32
    %4 = arith.divsi %3, %c256_i32 : i32
    %5 = arith.muli %4, %c8_i32 : i32
    %6 = arith.divsi %0, %5 : i32
    %7 = arith.muli %6, %c8_i32 : i32
    %8 = arith.subi %2, %7 : i32
    %9 = "triton_gpu.cmpi"(%8, %c8_i32) <{predicate = 2 : i64}> : (i32, i32) -> i1
    %10 = arith.select %9, %8, %c8_i32 : i32
    %11 = arith.remsi %0, %10 : i32
    %12 = arith.addi %7, %11 : i32
    %13 = arith.remsi %0, %5 : i32
    %14 = arith.divsi %13, %10 : i32
    %15 = arith.muli %12, %c64_i32 : i32
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %18 = tt.splat %15 : (i32) -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %19 = tt.splat %15 : (i32) -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %20 = arith.addi %18, %16 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %21 = arith.addi %19, %17 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %22 = arith.muli %14, %c256_i32 : i32
    %23 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %24 = tt.splat %22 : (i32) -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %25 = arith.addi %24, %23 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %26 = tt.expand_dims %20 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked>
    %27 = tt.expand_dims %21 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1>
    %28 = tt.splat %arg6 : (i32) -> tensor<64x1xi32, #blocked>
    %29 = arith.muli %26, %28 : tensor<64x1xi32, #blocked>
    %30 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<64x1x!tt.ptr<f16>, #blocked>
    %31 = tt.addptr %30, %29 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked>
    %32 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %33 = tt.expand_dims %32 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x32xi32, #blocked>
    %34 = tt.broadcast %31 : (tensor<64x1x!tt.ptr<f16>, #blocked>) -> tensor<64x32x!tt.ptr<f16>, #blocked>
    %35 = tt.broadcast %33 : (tensor<1x32xi32, #blocked>) -> tensor<64x32xi32, #blocked>
    %36 = tt.addptr %34, %35 : tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<64x32xi32, #blocked>
    %37 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %38 = tt.expand_dims %37 {axis = 1 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<32x1xi32, #blocked1>
    %39 = tt.splat %arg7 : (i32) -> tensor<32x1xi32, #blocked1>
    %40 = arith.muli %38, %39 : tensor<32x1xi32, #blocked1>
    %41 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>, #blocked1>
    %42 = tt.addptr %41, %40 : tensor<32x1x!tt.ptr<f16>, #blocked1>, tensor<32x1xi32, #blocked1>
    %43 = tt.expand_dims %25 {axis = 0 : i32} : (tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x256xi32, #blocked1>
    %44 = tt.broadcast %42 : (tensor<32x1x!tt.ptr<f16>, #blocked1>) -> tensor<32x256x!tt.ptr<f16>, #blocked1>
    %45 = tt.broadcast %43 : (tensor<1x256xi32, #blocked1>) -> tensor<32x256xi32, #blocked1>
    %46 = tt.addptr %44, %45 : tensor<32x256x!tt.ptr<f16>, #blocked1>, tensor<32x256xi32, #blocked1>
    %47 = arith.addi %arg5, %c31_i32 : i32
    %48 = arith.divsi %47, %c32_i32 : i32
    %49 = arith.muli %arg7, %c32_i32 : i32
    %50 = tt.splat %49 : (i32) -> tensor<32x256xi32, #blocked1>
    %51:3 = scf.for %arg9 = %c0_i32 to %48 step %c1_i32 iter_args(%arg10 = %cst, %arg11 = %36, %arg12 = %46) -> (tensor<64x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>, tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<32x256x!tt.ptr<f16>, #blocked1>)  : i32 {
      %61 = tt.load %arg11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked>
      %62 = triton_gpu.convert_layout %61 : (tensor<64x32xf16, #blocked>) -> tensor<64x32xf16, #shared>
      %63 = triton_gpu.convert_layout %62 : (tensor<64x32xf16, #shared>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
      %64 = tt.load %arg12 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x256xf16, #blocked1>
      %65 = triton_gpu.convert_layout %64 : (tensor<32x256xf16, #blocked1>) -> tensor<32x256xf16, #shared1>
      %66 = triton_gpu.convert_layout %65 : (tensor<32x256xf16, #shared1>) -> tensor<32x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>>
      %67 = tt.dot %63, %66, %arg10 {allowTF32 = true} : tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> * tensor<32x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>}>> -> tensor<64x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
      %68 = tt.addptr %arg11, %cst_0 : tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<64x32xi32, #blocked>
      %69 = tt.addptr %arg12, %50 : tensor<32x256x!tt.ptr<f16>, #blocked1>, tensor<32x256xi32, #blocked1>
      scf.yield %67, %68, %69 : tensor<64x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>, tensor<64x32x!tt.ptr<f16>, #blocked>, tensor<32x256x!tt.ptr<f16>, #blocked1>
    }
    %52 = arith.truncf %51#0 : tensor<64x256xf32, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>> to tensor<64x256xf16, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>
    %53 = tt.splat %arg8 : (i32) -> tensor<64x1xi32, #blocked1>
    %54 = arith.muli %53, %27 : tensor<64x1xi32, #blocked1>
    %55 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<64x1x!tt.ptr<f16>, #blocked1>
    %56 = tt.addptr %55, %54 : tensor<64x1x!tt.ptr<f16>, #blocked1>, tensor<64x1xi32, #blocked1>
    %57 = tt.broadcast %56 : (tensor<64x1x!tt.ptr<f16>, #blocked1>) -> tensor<64x256x!tt.ptr<f16>, #blocked1>
    %58 = tt.broadcast %43 : (tensor<1x256xi32, #blocked1>) -> tensor<64x256xi32, #blocked1>
    %59 = tt.addptr %57, %58 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1>
    %60 = triton_gpu.convert_layout %52 : (tensor<64x256xf16, #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [1, 4], isTransposed = false}>>) -> tensor<64x256xf16, #blocked1>
    tt.store %59, %60 {cache = 1 : i32, evict = 1 : i32} : tensor<64x256xf16, #blocked1>
    tt.return
  }
}
