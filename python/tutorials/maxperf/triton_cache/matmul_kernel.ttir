module {
  tt.func public @matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c31_i32 = arith.constant 31 : i32
    %c255_i32 = arith.constant 255 : i32
    %c63_i32 = arith.constant 63 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<32> : tensor<64x32xi32>
    %c32_i32 = arith.constant 32 : i32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x256xf32>
    %c256_i32 = arith.constant 256 : i32
    %c64_i32 = arith.constant 64 : i32
    %c8_i32 = arith.constant 8 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.addi %arg3, %c63_i32 : i32
    %2 = arith.divsi %1, %c64_i32 : i32
    %3 = arith.addi %arg4, %c255_i32 : i32
    %4 = arith.divsi %3, %c256_i32 : i32
    %5 = arith.muli %4, %c8_i32 : i32
    %6 = arith.divsi %0, %5 : i32
    %7 = arith.muli %6, %c8_i32 : i32
    %8 = arith.subi %2, %7 : i32
    %9 = arith.cmpi slt, %8, %c8_i32 : i32
    %10 = arith.select %9, %8, %c8_i32 : i32
    %11 = arith.remsi %0, %10 : i32
    %12 = arith.addi %7, %11 : i32
    %13 = arith.remsi %0, %5 : i32
    %14 = arith.divsi %13, %10 : i32
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %16 = arith.muli %12, %c64_i32 : i32
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %18 = tt.splat %16 : (i32) -> tensor<64xi32>
    %19 = arith.addi %18, %17 : tensor<64xi32>
    %20 = arith.muli %14, %c256_i32 : i32
    %21 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %22 = tt.splat %20 : (i32) -> tensor<256xi32>
    %23 = arith.addi %22, %21 : tensor<256xi32>
    %24 = tt.expand_dims %19 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %25 = tt.splat %arg6 : (i32) -> tensor<64x1xi32>
    %26 = arith.muli %24, %25 : tensor<64x1xi32>
    %27 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<64x1x!tt.ptr<f16>>
    %28 = tt.addptr %27, %26 : tensor<64x1x!tt.ptr<f16>>, tensor<64x1xi32>
    %29 = tt.expand_dims %15 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %30 = tt.broadcast %28 : (tensor<64x1x!tt.ptr<f16>>) -> tensor<64x32x!tt.ptr<f16>>
    %31 = tt.broadcast %29 : (tensor<1x32xi32>) -> tensor<64x32xi32>
    %32 = tt.addptr %30, %31 : tensor<64x32x!tt.ptr<f16>>, tensor<64x32xi32>
    %33 = tt.expand_dims %15 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %34 = tt.splat %arg7 : (i32) -> tensor<32x1xi32>
    %35 = arith.muli %33, %34 : tensor<32x1xi32>
    %36 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<32x1x!tt.ptr<f16>>
    %37 = tt.addptr %36, %35 : tensor<32x1x!tt.ptr<f16>>, tensor<32x1xi32>
    %38 = tt.expand_dims %23 {axis = 0 : i32} : (tensor<256xi32>) -> tensor<1x256xi32>
    %39 = tt.broadcast %37 : (tensor<32x1x!tt.ptr<f16>>) -> tensor<32x256x!tt.ptr<f16>>
    %40 = tt.broadcast %38 : (tensor<1x256xi32>) -> tensor<32x256xi32>
    %41 = tt.addptr %39, %40 : tensor<32x256x!tt.ptr<f16>>, tensor<32x256xi32>
    %42 = arith.addi %arg5, %c31_i32 : i32
    %43 = arith.divsi %42, %c32_i32 : i32
    %44 = arith.muli %arg7, %c32_i32 : i32
    %45 = tt.splat %44 : (i32) -> tensor<32x256xi32>
    %46:3 = scf.for %arg9 = %c0_i32 to %43 step %c1_i32 iter_args(%arg10 = %cst_0, %arg11 = %32, %arg12 = %41) -> (tensor<64x256xf32>, tensor<64x32x!tt.ptr<f16>>, tensor<32x256x!tt.ptr<f16>>)  : i32 {
      %55 = tt.load %arg11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16>
      %56 = tt.load %arg12 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x256xf16>
      %57 = tt.dot %55, %56, %arg10 {allowTF32 = true} : tensor<64x32xf16> * tensor<32x256xf16> -> tensor<64x256xf32>
      %58 = tt.addptr %arg11, %cst : tensor<64x32x!tt.ptr<f16>>, tensor<64x32xi32>
      %59 = tt.addptr %arg12, %45 : tensor<32x256x!tt.ptr<f16>>, tensor<32x256xi32>
      scf.yield %57, %58, %59 : tensor<64x256xf32>, tensor<64x32x!tt.ptr<f16>>, tensor<32x256x!tt.ptr<f16>>
    }
    %47 = arith.truncf %46#0 : tensor<64x256xf32> to tensor<64x256xf16>
    %48 = tt.splat %arg8 : (i32) -> tensor<64x1xi32>
    %49 = arith.muli %48, %24 : tensor<64x1xi32>
    %50 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<64x1x!tt.ptr<f16>>
    %51 = tt.addptr %50, %49 : tensor<64x1x!tt.ptr<f16>>, tensor<64x1xi32>
    %52 = tt.broadcast %51 : (tensor<64x1x!tt.ptr<f16>>) -> tensor<64x256x!tt.ptr<f16>>
    %53 = tt.broadcast %38 : (tensor<1x256xi32>) -> tensor<64x256xi32>
    %54 = tt.addptr %52, %53 : tensor<64x256x!tt.ptr<f16>>, tensor<64x256xi32>
    tt.store %54, %47 {cache = 1 : i32, evict = 1 : i32} : tensor<64x256xf16>
    tt.return
  }
}
